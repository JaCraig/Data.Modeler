{
  "api/Data.Modeler.DataModeler.html": {
    "href": "api/Data.Modeler.DataModeler.html",
    "title": "Class DataModeler | Data.Modeler API Reference",
    "keywords": "Class DataModeler Data modeler class. Inheritance object DataModeler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler Assembly: Data.Modeler.dll Syntax public class DataModeler Constructors | Improve this Doc View Source DataModeler(IEnumerable<ISchemaGenerator>) Initializes a new instance of the DataModeler class. Declaration public DataModeler(IEnumerable<ISchemaGenerator> generators) Parameters Type Name Description IEnumerable<ISchemaGenerator> generators The generators. Methods | Improve this Doc View Source CreateSource(string) Creates the source. Declaration public static ISource CreateSource(string name) Parameters Type Name Description string name The name. Returns Type Description ISource The source requested. | Improve this Doc View Source GetSchemaGenerator(DbProviderFactory) Gets the schema generator based on the DbProviderFactory sent in. Declaration public ISchemaGenerator? GetSchemaGenerator(DbProviderFactory factory) Parameters Type Name Description DbProviderFactory factory The DbProviderFactory. Returns Type Description ISchemaGenerator The requested schema generator"
  },
  "api/Data.Modeler.html": {
    "href": "api/Data.Modeler.html",
    "title": "Namespace Data.Modeler | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler Classes DataModeler Data modeler class."
  },
  "api/Data.Modeler.Modules.DataModelerModule.html": {
    "href": "api/Data.Modeler.Modules.DataModelerModule.html",
    "title": "Class DataModelerModule | Data.Modeler API Reference",
    "keywords": "Class DataModelerModule Data modeler module Inheritance object DataModelerModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Modules Assembly: Data.Modeler.dll Syntax public class DataModelerModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/Data.Modeler.Modules.html": {
    "href": "api/Data.Modeler.Modules.html",
    "title": "Namespace Data.Modeler.Modules | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Modules Classes DataModelerModule Data modeler module"
  },
  "api/Data.Modeler.Providers.BaseClasses.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.html",
    "title": "Namespace Data.Modeler.Providers.BaseClasses | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.BaseClasses Classes SourceBase Source base class TableBase Table base class"
  },
  "api/Data.Modeler.Providers.BaseClasses.SourceBase.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.SourceBase.html",
    "title": "Class SourceBase | Data.Modeler API Reference",
    "keywords": "Class SourceBase Source base class Inheritance object SourceBase Source Implements ISource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.BaseClasses Assembly: Data.Modeler.dll Syntax public abstract class SourceBase : ISource Constructors | Improve this Doc View Source SourceBase(string) Constructor Declaration protected SourceBase(string name) Parameters Type Name Description string name The name. Properties | Improve this Doc View Source Functions Functions with the source Declaration public List<IFunction> Functions { get; } Property Value Type Description List<IFunction> | Improve this Doc View Source this[string] Gets a specific table based on the name Declaration public ITable this[string name] { get; } Parameters Type Name Description string name Name of the table Property Value Type Description ITable The table specified | Improve this Doc View Source Name Name of the source Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Schemas Gets the schemas. Declaration public List<string> Schemas { get; } Property Value Type Description List<string> The schemas. | Improve this Doc View Source StoredProcedures Stored procedures within the source Declaration public List<IFunction> StoredProcedures { get; } Property Value Type Description List<IFunction> | Improve this Doc View Source Tables Tables within the source Declaration public List<ITable> Tables { get; } Property Value Type Description List<ITable> | Improve this Doc View Source Views Views within the source Declaration public List<IFunction> Views { get; } Property Value Type Description List<IFunction> Methods | Improve this Doc View Source AddFunction(string, string, string) Adds a function to the source Declaration public abstract IFunction AddFunction(string name, string schemaName, string definition) Parameters Type Name Description string name Name of the function string schemaName Name of the schema. string definition Definition of the function Returns Type Description IFunction Function that was created/added | Improve this Doc View Source AddStoredProcedure(string, string, string) Adds a stored procedure to the source Declaration public abstract IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters Type Name Description string procedureName Procedure name string schemaName Name of the schema. string definition Definition of the stored procedure Returns Type Description IFunction Stored procedure that was created/added | Improve this Doc View Source AddTable(string, string) Adds a table to the source Declaration public abstract ITable AddTable(string tableName, string schemaName) Parameters Type Name Description string tableName Table name string schemaName Name of the schema. Returns Type Description ITable Table that was created/added | Improve this Doc View Source AddView(string, string, string) Adds a view to the source Declaration public abstract IFunction AddView(string viewName, string schemaName, string definition) Parameters Type Name Description string viewName View name string schemaName Name of the schema. string definition The definition. Returns Type Description IFunction View that was created/added | Improve this Doc View Source Copy() Copies this instance. Declaration public ISource Copy() Returns Type Description ISource A copy of this instance. Implements ISource"
  },
  "api/Data.Modeler.Providers.BaseClasses.TableBase.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.TableBase.html",
    "title": "Class TableBase | Data.Modeler API Reference",
    "keywords": "Class TableBase Table base class Inheritance object TableBase StoredProcedure Table View Implements ITable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.BaseClasses Assembly: Data.Modeler.dll Syntax public abstract class TableBase : ITable Constructors | Improve this Doc View Source TableBase(string, string, ISource) Constructor Declaration protected TableBase(string name, string schema, ISource source) Parameters Type Name Description string name Name of the table string schema The schema. ISource source Source that the table is from Properties | Improve this Doc View Source Audit Gets a value indicating whether this is audit. Declaration public bool Audit { get; set; } Property Value Type Description bool true if audit; otherwise, false. | Improve this Doc View Source Columns Columns Declaration public List<IColumn> Columns { get; } Property Value Type Description List<IColumn> | Improve this Doc View Source Constraints Gets the constraints. Declaration public List<ICheckConstraint> Constraints { get; } Property Value Type Description List<ICheckConstraint> The constraints. | Improve this Doc View Source this[string] The column specified Declaration public IColumn this[string name] { get; } Parameters Type Name Description string name Name of the column Property Value Type Description IColumn The column specified | Improve this Doc View Source Name Name of the table Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Schema Gets or sets the schema. Declaration public string Schema { get; } Property Value Type Description string The schema. | Improve this Doc View Source Source Source/Parent Declaration public ISource Source { get; } Property Value Type Description ISource | Improve this Doc View Source Triggers List of triggers associated with the table Declaration public List<ITrigger> Triggers { get; } Property Value Type Description List<ITrigger> Methods | Improve this Doc View Source AddCheckConstraint(string, string) Adds a check constraint to the table. Declaration public abstract ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters Type Name Description string name The name. string definition The definition. Returns Type Description ICheckConstraint The check constraint added to the table | Improve this Doc View Source AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column Declaration public abstract IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters Type Name Description string columnName Column Name DbType columnType Data type int length Data length bool nullable Nullable? bool identity Identity? bool index Index? bool primaryKey Primary key? bool unique Unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade On Delete Cascade bool onUpdateCascade On Update Cascade bool onDeleteSetNull On Delete Set Null Returns Type Description IColumn Type Parameters Name Description T Column type | Improve this Doc View Source AddForeignKey(string, string, string) Adds a foreign key Declaration public abstract void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string columnName Column name string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column | Improve this Doc View Source AddTrigger(string, string, TriggerType) Adds a trigger to the table Declaration public abstract ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters Type Name Description string name Name of the trigger string definition Definition of the trigger TriggerType type Trigger type Returns Type Description ITrigger The trigger specified | Improve this Doc View Source ContainsColumn(string) Determines if a column exists in the table Declaration public bool ContainsColumn(string columnName) Parameters Type Name Description string columnName Column name Returns Type Description bool True if it exists, false otherwise | Improve this Doc View Source Copy(ISource) Copies this instance. Declaration public abstract ITable Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description ITable The copy of this instance. | Improve this Doc View Source SetupForeignKeys() Sets up foreign keys Declaration public void SetupForeignKeys() Implements ITable"
  },
  "api/Data.Modeler.Providers.CheckConstraint.html": {
    "href": "api/Data.Modeler.Providers.CheckConstraint.html",
    "title": "Class CheckConstraint | Data.Modeler API Reference",
    "keywords": "Class CheckConstraint CheckConstraint class Inheritance object CheckConstraint Implements ICheckConstraint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class CheckConstraint : ICheckConstraint Constructors | Improve this Doc View Source CheckConstraint(string, string, ITable) Constructor Declaration public CheckConstraint(string name, string definition, ITable parentTable) Parameters Type Name Description string name Name string definition Definition ITable parentTable Parent table Properties | Improve this Doc View Source Definition Definition of the CheckConstraint Declaration public string Definition { get; set; } Property Value Type Description string | Improve this Doc View Source Name Name of the CheckConstraint Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source ParentTable Parent table Declaration public ITable ParentTable { get; set; } Property Value Type Description ITable Methods | Improve this Doc View Source Copy(ITable) Copies this instance Declaration public ICheckConstraint Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description ICheckConstraint The copy | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ICheckConstraint"
  },
  "api/Data.Modeler.Providers.Column-1.html": {
    "href": "api/Data.Modeler.Providers.Column-1.html",
    "title": "Class Column<T> | Data.Modeler API Reference",
    "keywords": "Class Column<T> Column class Inheritance object Column<T> Implements IColumn Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class Column<T> : IColumn Type Parameters Name Description T Data type of the column Constructors | Improve this Doc View Source Column(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool, ITable) Constructor Declaration public Column(string name, DbType columnType, int length, bool nullable, bool identity, bool index, bool primaryKey, bool unique, string foreignKeyTable, string foreignKeyColumn, T defaultValue, string computedColumnSpecification, bool onDeleteCascade, bool onUpdateCascade, bool onDeleteSetNull, ITable parentTable) Parameters Type Name Description string name Name of the column DbType columnType The data type int length The data length bool nullable Is it nullable? bool identity Is it an identity? bool index Is it the index? bool primaryKey Is it the primary key? bool unique Is it unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade Cascade on delete bool onUpdateCascade Cascade on update bool onDeleteSetNull Set null on delete ITable parentTable Parent table Properties | Improve this Doc View Source AutoIncrement Auto increment? Declaration public bool AutoIncrement { get; set; } Property Value Type Description bool | Improve this Doc View Source ComputedColumnSpecification Gets the computed column specificaation. Declaration public string ComputedColumnSpecification { get; } Property Value Type Description string The computed column specificaation. | Improve this Doc View Source DataType Data type Declaration public DbType DataType { get; set; } Property Value Type Description DbType | Improve this Doc View Source Default Default value Declaration public string Default { get; set; } Property Value Type Description string | Improve this Doc View Source ForeignKey Foreign keys Declaration public List<IColumn> ForeignKey { get; } Property Value Type Description List<IColumn> | Improve this Doc View Source Index Index? Declaration public bool Index { get; set; } Property Value Type Description bool | Improve this Doc View Source Length Data length Declaration public int Length { get; set; } Property Value Type Description int | Improve this Doc View Source Name Name Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Nullable Nullable? Declaration public bool Nullable { get; set; } Property Value Type Description bool | Improve this Doc View Source OnDeleteCascade On Delete Cascade Declaration public bool OnDeleteCascade { get; set; } Property Value Type Description bool | Improve this Doc View Source OnDeleteSetNull On Delete Set Null Declaration public bool OnDeleteSetNull { get; set; } Property Value Type Description bool | Improve this Doc View Source OnUpdateCascade On Update Cascade Declaration public bool OnUpdateCascade { get; set; } Property Value Type Description bool | Improve this Doc View Source ParentTable Parent table Declaration public ITable ParentTable { get; set; } Property Value Type Description ITable | Improve this Doc View Source PrimaryKey Primary key? Declaration public bool PrimaryKey { get; set; } Property Value Type Description bool | Improve this Doc View Source Unique Unique? Declaration public bool Unique { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source AddForeignKey(string, string) Add foreign key Declaration public void AddForeignKey(string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string foreignKeyTable Table of the foreign key string foreignKeyColumn Column of the foreign key | Improve this Doc View Source Copy(ITable) Copies this instance Declaration public IColumn Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description IColumn The copy | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() | Improve this Doc View Source SetupForeignKeys() Sets up the foreign key list Declaration public void SetupForeignKeys() Implements IColumn"
  },
  "api/Data.Modeler.Providers.Enums.html": {
    "href": "api/Data.Modeler.Providers.Enums.html",
    "title": "Namespace Data.Modeler.Providers.Enums | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.Enums Enums TriggerType The type of trigger"
  },
  "api/Data.Modeler.Providers.Enums.TriggerType.html": {
    "href": "api/Data.Modeler.Providers.Enums.TriggerType.html",
    "title": "Enum TriggerType | Data.Modeler API Reference",
    "keywords": "Enum TriggerType The type of trigger Namespace: Data.Modeler.Providers.Enums Assembly: Data.Modeler.dll Syntax public enum TriggerType Fields Name Description Delete Delete Insert Insert Update Update"
  },
  "api/Data.Modeler.Providers.Function.html": {
    "href": "api/Data.Modeler.Providers.Function.html",
    "title": "Class Function | Data.Modeler API Reference",
    "keywords": "Class Function Function class Inheritance object Function Implements IFunction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class Function : IFunction Constructors | Improve this Doc View Source Function(string, string, string, ISource) Constructor Declaration public Function(string name, string schema, string definition, ISource source) Parameters Type Name Description string name Name string schema The schema. string definition Definition ISource source Source Properties | Improve this Doc View Source Definition Definition of the Function Declaration public string Definition { get; set; } Property Value Type Description string | Improve this Doc View Source Name Name of the Function Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Schema Gets the name of the schema. Declaration public string Schema { get; } Property Value Type Description string The name of the schema. | Improve this Doc View Source Source Source Declaration public ISource Source { get; set; } Property Value Type Description ISource Methods | Improve this Doc View Source Copy(ISource) Copies the specified instance Declaration public IFunction Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description IFunction The copy | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements IFunction"
  },
  "api/Data.Modeler.Providers.html": {
    "href": "api/Data.Modeler.Providers.html",
    "title": "Namespace Data.Modeler.Providers | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers Classes CheckConstraint CheckConstraint class Column<T> Column class Function Function class Source Database class StoredProcedure StoredProcedure class Table Table class Trigger Trigger class View View class"
  },
  "api/Data.Modeler.Providers.Interfaces.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.html",
    "title": "Namespace Data.Modeler.Providers.Interfaces | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.Interfaces Interfaces ICheckConstraint Check constraint interface IColumn Column interface ICommandBuilder Builder interface Helps with simplifying command building IFunction Function class ISchemaGenerator Schema generator interface ISource Interface for source objects (like databases) ISourceBuilder Builder interface Helps with simplifying schema building ITable Interface for table like structures ITrigger Trigger interface"
  },
  "api/Data.Modeler.Providers.Interfaces.ICheckConstraint.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ICheckConstraint.html",
    "title": "Interface ICheckConstraint | Data.Modeler API Reference",
    "keywords": "Interface ICheckConstraint Check constraint interface Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ICheckConstraint Properties | Improve this Doc View Source Definition Gets or sets the definition. Declaration string Definition { get; set; } Property Value Type Description string The definition. | Improve this Doc View Source Name Gets or sets the name. Declaration string Name { get; set; } Property Value Type Description string The name. | Improve this Doc View Source ParentTable Parent table Declaration ITable ParentTable { get; set; } Property Value Type Description ITable The parent table. Methods | Improve this Doc View Source Copy(ITable) Copies this instance Declaration ICheckConstraint Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description ICheckConstraint The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.IColumn.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.IColumn.html",
    "title": "Interface IColumn | Data.Modeler API Reference",
    "keywords": "Interface IColumn Column interface Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface IColumn Properties | Improve this Doc View Source AutoIncrement Auto increment? Declaration bool AutoIncrement { get; set; } Property Value Type Description bool | Improve this Doc View Source ComputedColumnSpecification Gets the computed column specification (if one exists). Declaration string ComputedColumnSpecification { get; } Property Value Type Description string The computed column specification (if one exists). | Improve this Doc View Source DataType Data type Declaration DbType DataType { get; set; } Property Value Type Description DbType | Improve this Doc View Source Default Default value Declaration string Default { get; set; } Property Value Type Description string | Improve this Doc View Source ForeignKey Foreign keys Declaration List<IColumn> ForeignKey { get; } Property Value Type Description List<IColumn> | Improve this Doc View Source Index Index? Declaration bool Index { get; set; } Property Value Type Description bool | Improve this Doc View Source Length Data length Declaration int Length { get; set; } Property Value Type Description int | Improve this Doc View Source Name Name Declaration string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Nullable Nullable? Declaration bool Nullable { get; set; } Property Value Type Description bool | Improve this Doc View Source OnDeleteCascade On Delete Cascade Declaration bool OnDeleteCascade { get; set; } Property Value Type Description bool | Improve this Doc View Source OnDeleteSetNull On Delete Set Null Declaration bool OnDeleteSetNull { get; set; } Property Value Type Description bool | Improve this Doc View Source OnUpdateCascade On Update Cascade Declaration bool OnUpdateCascade { get; set; } Property Value Type Description bool | Improve this Doc View Source ParentTable Parent table Declaration ITable ParentTable { get; set; } Property Value Type Description ITable | Improve this Doc View Source PrimaryKey Primary key? Declaration bool PrimaryKey { get; set; } Property Value Type Description bool | Improve this Doc View Source Unique Unique? Declaration bool Unique { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source AddForeignKey(string, string) Add foreign key Declaration void AddForeignKey(string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string foreignKeyTable Table of the foreign key string foreignKeyColumn Column of the foreign key | Improve this Doc View Source Copy(ITable) Copies this instance Declaration IColumn Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description IColumn The copy | Improve this Doc View Source SetupForeignKeys() Sets up the foreign key list Declaration void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.Interfaces.ICommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ICommandBuilder.html",
    "title": "Interface ICommandBuilder | Data.Modeler API Reference",
    "keywords": "Interface ICommandBuilder Builder interface Helps with simplifying command building Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ICommandBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Gets the provider this source builder supports Declaration DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] The provider. Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure"
  },
  "api/Data.Modeler.Providers.Interfaces.IFunction.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.IFunction.html",
    "title": "Interface IFunction | Data.Modeler API Reference",
    "keywords": "Interface IFunction Function class Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface IFunction Properties | Improve this Doc View Source Definition Definition Declaration string Definition { get; set; } Property Value Type Description string | Improve this Doc View Source Name Name Declaration string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Schema Gets the name of the schema. Declaration string Schema { get; } Property Value Type Description string The name of the schema. | Improve this Doc View Source Source Parent database Declaration ISource Source { get; } Property Value Type Description ISource Methods | Improve this Doc View Source Copy(ISource) Copies the specified instance Declaration IFunction Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description IFunction The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.ISchemaGenerator.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISchemaGenerator.html",
    "title": "Interface ISchemaGenerator | Data.Modeler API Reference",
    "keywords": "Interface ISchemaGenerator Schema generator interface Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ISchemaGenerator Properties | Improve this Doc View Source Providers Provider associated with the schema generator Declaration DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source GenerateSchema(ISource, ISource) Generates a list of commands used to modify the source. If it does not exist prior, the commands will create the source from scratch. Otherwise the commands will only add new fields, tables, etc. It does not delete old fields. Declaration string[] GenerateSchema(ISource desiredStructure, ISource source) Parameters Type Name Description ISource desiredStructure Desired source structure ISource source Source to use Returns Type Description string[] List of commands generated | Improve this Doc View Source GetSourceStructureAsync(IConnection) Gets the structure of a source Declaration Task<ISource?> GetSourceStructureAsync(IConnection connectionInfo) Parameters Type Name Description IConnection connectionInfo The connection information. Returns Type Description Task<ISource> The source structure | Improve this Doc View Source SetupAsync(ISource, IConnection) Sets up the specified source. Declaration Task SetupAsync(ISource source, IConnection connection) Parameters Type Name Description ISource source The source. IConnection connection The connection. Returns Type Description Task | Improve this Doc View Source SetupAsync(string[], IConnection) Sets up the specified source. Declaration Task SetupAsync(string[] schemaChanges, IConnection connection) Parameters Type Name Description string[] schemaChanges The schema changes. IConnection connection The connection. Returns Type Description Task | Improve this Doc View Source SourceExistsAsync(string, IConnection) Checks if a source exists Declaration Task<bool> SourceExistsAsync(string source, IConnection connectionInfo) Parameters Type Name Description string source The source. IConnection connectionInfo The connection. Returns Type Description Task<bool> True if it exists, false otherwise | Improve this Doc View Source StoredProcedureExistsAsync(string, IConnection) Checks if a stored procedure exists Declaration Task<bool> StoredProcedureExistsAsync(string storedProcedure, IConnection connectionInfo) Parameters Type Name Description string storedProcedure Stored procedure to check IConnection connectionInfo The connection information. Returns Type Description Task<bool> True if it exists, false otherwise | Improve this Doc View Source TableExistsAsync(string, IConnection) Checks if a table exists Declaration Task<bool> TableExistsAsync(string table, IConnection connectionInfo) Parameters Type Name Description string table Table to check IConnection connectionInfo The connection information. Returns Type Description Task<bool> True if it exists, false otherwise | Improve this Doc View Source TriggerExistsAsync(string, IConnection) Checks if a trigger exists Declaration Task<bool> TriggerExistsAsync(string trigger, IConnection connectionInfo) Parameters Type Name Description string trigger Trigger to check IConnection connectionInfo The connection information. Returns Type Description Task<bool> True if it exists, false otherwise | Improve this Doc View Source ViewExistsAsync(string, IConnection) Checks if a view exists Declaration Task<bool> ViewExistsAsync(string view, IConnection connectionInfo) Parameters Type Name Description string view View to check IConnection connectionInfo The connection information. Returns Type Description Task<bool> True if it exists, false otherwise"
  },
  "api/Data.Modeler.Providers.Interfaces.ISource.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISource.html",
    "title": "Interface ISource | Data.Modeler API Reference",
    "keywords": "Interface ISource Interface for source objects (like databases) Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ISource Properties | Improve this Doc View Source Functions List of functions Declaration List<IFunction> Functions { get; } Property Value Type Description List<IFunction> | Improve this Doc View Source this[string] Returns a table with the given name Declaration ITable this[string name] { get; } Parameters Type Name Description string name Table name Property Value Type Description ITable The table specified | Improve this Doc View Source Name Name Declaration string Name { get; set; } Property Value Type Description string | Improve this Doc View Source Schemas Gets the schemas. Declaration List<string> Schemas { get; } Property Value Type Description List<string> The schemas. | Improve this Doc View Source StoredProcedures List of stored procedures Declaration List<IFunction> StoredProcedures { get; } Property Value Type Description List<IFunction> | Improve this Doc View Source Tables List of tables Declaration List<ITable> Tables { get; } Property Value Type Description List<ITable> | Improve this Doc View Source Views List of views Declaration List<IFunction> Views { get; } Property Value Type Description List<IFunction> Methods | Improve this Doc View Source AddFunction(string, string, string) Adds a function to the database Declaration IFunction AddFunction(string name, string schemaName, string definition) Parameters Type Name Description string name Function name string schemaName Name of the schema. string definition Function definition Returns Type Description IFunction | Improve this Doc View Source AddStoredProcedure(string, string, string) Adds a stored procedure to the database Declaration IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters Type Name Description string procedureName Procedure name string schemaName Name of the schema. string definition Definition Returns Type Description IFunction | Improve this Doc View Source AddTable(string, string) Adds a table to the database Declaration ITable AddTable(string tableName, string schemaName) Parameters Type Name Description string tableName Table name string schemaName Name of the schema. Returns Type Description ITable | Improve this Doc View Source AddView(string, string, string) Adds a view to the database Declaration IFunction AddView(string viewName, string schemaName, string definition) Parameters Type Name Description string viewName View name string schemaName Name of the schema. string definition The definition. Returns Type Description IFunction The view that is created | Improve this Doc View Source Copy() Copies this instance Declaration ISource Copy() Returns Type Description ISource The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.ISourceBuilder.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISourceBuilder.html",
    "title": "Interface ISourceBuilder | Data.Modeler API Reference",
    "keywords": "Interface ISourceBuilder Builder interface Helps with simplifying schema building Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Gets the provider this source builder supports Declaration DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] The provider. Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the source. Declaration void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The data source. | Improve this Doc View Source GetCommand() Gets the command. Declaration string GetCommand() Returns Type Description string The command to get the source"
  },
  "api/Data.Modeler.Providers.Interfaces.ITable.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ITable.html",
    "title": "Interface ITable | Data.Modeler API Reference",
    "keywords": "Interface ITable Interface for table like structures Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ITable Properties | Improve this Doc View Source Audit Gets a value indicating whether this ITable is audit. Declaration bool Audit { get; set; } Property Value Type Description bool true if audit; otherwise, false. | Improve this Doc View Source Columns Columns Declaration List<IColumn> Columns { get; } Property Value Type Description List<IColumn> The columns. | Improve this Doc View Source Constraints Gets the constraints. Declaration List<ICheckConstraint> Constraints { get; } Property Value Type Description List<ICheckConstraint> The constraints. | Improve this Doc View Source this[string] Returns the specified column Declaration IColumn this[string name] { get; } Parameters Type Name Description string name Name of the column Property Value Type Description IColumn Column specified | Improve this Doc View Source Name Name Declaration string Name { get; set; } Property Value Type Description string The name. | Improve this Doc View Source Schema Gets or sets the schema. Declaration string Schema { get; } Property Value Type Description string The schema. | Improve this Doc View Source Source Parent of the table structure Declaration ISource Source { get; } Property Value Type Description ISource The source. | Improve this Doc View Source Triggers Triggers associated with the table (if source supports them) Declaration List<ITrigger> Triggers { get; } Property Value Type Description List<ITrigger> The triggers. Methods | Improve this Doc View Source AddCheckConstraint(string, string) Adds a check constraint to the table. Declaration ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters Type Name Description string name The name. string definition The definition. Returns Type Description ICheckConstraint The check constraint added to the table | Improve this Doc View Source AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column Declaration IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters Type Name Description string columnName Column Name DbType columnType Data type int length Data length bool nullable Nullable? bool identity Identity? bool index Index? bool primaryKey Primary key? bool unique Unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade On Delete Cascade bool onUpdateCascade On Update Cascade bool onDeleteSetNull On Delete Set Null Returns Type Description IColumn Type Parameters Name Description T Column type | Improve this Doc View Source AddForeignKey(string, string, string) Adds a foreign key Declaration void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string columnName Column name string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column | Improve this Doc View Source AddTrigger(string, string, TriggerType) Adds a trigger to the table Declaration ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters Type Name Description string name Name of the trigger string definition Trigger definition TriggerType type Trigger type Returns Type Description ITrigger Trigger added to the table | Improve this Doc View Source ContainsColumn(string) Determines if a column exists in the table Declaration bool ContainsColumn(string columnName) Parameters Type Name Description string columnName Column name Returns Type Description bool True if it exists, false otherwise | Improve this Doc View Source Copy(ISource) Copies this instance. Declaration ITable Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description ITable The copy of this instance. | Improve this Doc View Source SetupForeignKeys() Sets up foreign keys Declaration void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.Interfaces.ITrigger.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ITrigger.html",
    "title": "Interface ITrigger | Data.Modeler API Reference",
    "keywords": "Interface ITrigger Trigger interface Namespace: Data.Modeler.Providers.Interfaces Assembly: Data.Modeler.dll Syntax public interface ITrigger Properties | Improve this Doc View Source Definition Definition Declaration string Definition { get; set; } Property Value Type Description string | Improve this Doc View Source Name Name Declaration string Name { get; set; } Property Value Type Description string | Improve this Doc View Source ParentTable Parent table Declaration ITable ParentTable { get; set; } Property Value Type Description ITable | Improve this Doc View Source Type Trigger type Declaration TriggerType Type { get; set; } Property Value Type Description TriggerType Methods | Improve this Doc View Source Copy(ITable) Copies this instance Declaration ITrigger Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description ITrigger The copy"
  },
  "api/Data.Modeler.Providers.Source.html": {
    "href": "api/Data.Modeler.Providers.Source.html",
    "title": "Class Source | Data.Modeler API Reference",
    "keywords": "Class Source Database class Inheritance object SourceBase Source Implements ISource Inherited Members SourceBase.Functions SourceBase.Name SourceBase.Schemas SourceBase.StoredProcedures SourceBase.Tables SourceBase.Views SourceBase.this[string] SourceBase.Copy() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class Source : SourceBase, ISource Constructors | Improve this Doc View Source Source(string) Constructor Declaration public Source(string name) Parameters Type Name Description string name Name of the database Methods | Improve this Doc View Source AddFunction(string, string, string) Adds a function to the database Declaration public override IFunction AddFunction(string name, string schemaName, string definition) Parameters Type Name Description string name Function name string schemaName Name of the schema. string definition Function definition Returns Type Description IFunction Function that was created/added Overrides SourceBase.AddFunction(string, string, string) | Improve this Doc View Source AddStoredProcedure(string, string, string) Adds a stored procedure to the database Declaration public override IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters Type Name Description string procedureName Procedure name string schemaName Name of the schema. string definition Definition Returns Type Description IFunction The stored procedure Overrides SourceBase.AddStoredProcedure(string, string, string) | Improve this Doc View Source AddTable(string, string) Adds a table to the database Declaration public override ITable AddTable(string tableName, string schemaName) Parameters Type Name Description string tableName Table name string schemaName Name of the schema. Returns Type Description ITable Table that was created/added Overrides SourceBase.AddTable(string, string) | Improve this Doc View Source AddView(string, string, string) Adds a view to the database Declaration public override IFunction AddView(string viewName, string schemaName, string definition) Parameters Type Name Description string viewName View name string schemaName Name of the schema. string definition The definition. Returns Type Description IFunction The resulting view object Overrides SourceBase.AddView(string, string, string) | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ISource"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CheckConstraintCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CheckConstraintCommandBuilder.html",
    "title": "Class CheckConstraintCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CheckConstraintCommandBuilder CheckConstraint command builder Inheritance object CheckConstraintCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class CheckConstraintCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source CheckConstraintCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CheckConstraintCommandBuilder class. Declaration public CheckConstraintCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateDatabaseCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateDatabaseCommandBuilder.html",
    "title": "Class CreateDatabaseCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateDatabaseCommandBuilder Create database command builder Inheritance object CreateDatabaseCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class CreateDatabaseCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source CreateDatabaseCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateDatabaseCommandBuilder class. Declaration public CreateDatabaseCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateFunctionCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateFunctionCommandBuilder.html",
    "title": "Class CreateFunctionCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateFunctionCommandBuilder Function command builder Inheritance object CreateFunctionCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class CreateFunctionCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source CreateFunctionCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateFunctionCommandBuilder class. Declaration public CreateFunctionCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateSchemaCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateSchemaCommandBuilder.html",
    "title": "Class CreateSchemaCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateSchemaCommandBuilder Function command builder Inheritance object CreateSchemaCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class CreateSchemaCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source CreateSchemaCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateSchemaCommandBuilder class. Declaration public CreateSchemaCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateViewCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateViewCommandBuilder.html",
    "title": "Class CreateViewCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateViewCommandBuilder Create view command builder Inheritance object CreateViewCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class CreateViewCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source CreateViewCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateViewCommandBuilder class. Declaration public CreateViewCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.ForeignKeyCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.ForeignKeyCommandBuilder.html",
    "title": "Class ForeignKeyCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class ForeignKeyCommandBuilder Foreign key command builder Inheritance object ForeignKeyCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class ForeignKeyCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source ForeignKeyCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the ForeignKeyCommandBuilder class. Declaration public ForeignKeyCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer.CommandBuilders | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Classes CheckConstraintCommandBuilder CheckConstraint command builder CreateDatabaseCommandBuilder Create database command builder CreateFunctionCommandBuilder Function command builder CreateSchemaCommandBuilder Function command builder CreateViewCommandBuilder Create view command builder ForeignKeyCommandBuilder Foreign key command builder StoredProcedureCommandBuilder Stored procedure command builder TableCommandBuilder Table command builder TriggerCommandBuilder Trigger command builder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.StoredProcedureCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.StoredProcedureCommandBuilder.html",
    "title": "Class StoredProcedureCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class StoredProcedureCommandBuilder Stored procedure command builder Inheritance object StoredProcedureCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class StoredProcedureCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source StoredProcedureCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the StoredProcedureCommandBuilder class. Declaration public StoredProcedureCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TableCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TableCommandBuilder.html",
    "title": "Class TableCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class TableCommandBuilder Table command builder Inheritance object TableCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class TableCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source TableCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the TableCommandBuilder class. Declaration public TableCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TriggerCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TriggerCommandBuilder.html",
    "title": "Class TriggerCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class TriggerCommandBuilder Trigger command builder Inheritance object TriggerCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.CommandBuilders Assembly: Data.Modeler.dll Syntax public class TriggerCommandBuilder : ICommandBuilder Constructors | Improve this Doc View Source TriggerCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the TriggerCommandBuilder class. Declaration public TriggerCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. See Also ICommandBuilder Properties | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ICommandBuilder | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ICommandBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ICommandBuilder Methods | Improve this Doc View Source GetCommands(ISource, ISource?) Gets the commands. Declaration public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters Type Name Description ISource desiredStructure The desired structure. ISource currentStructure The current structure. Returns Type Description string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder Implements ICommandBuilder See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer Classes SQLServerSchemaGenerator SQL Server schema generator"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.CheckConstraints.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.CheckConstraints.html",
    "title": "Class CheckConstraints | Data.Modeler API Reference",
    "keywords": "Class CheckConstraints Check constraints source builder Inheritance object CheckConstraints Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class CheckConstraints : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ISourceBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ISourceBuilder Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. See Also ISourceBuilder | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source See Also ISourceBuilder Implements ISourceBuilder See Also ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Functions.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Functions.html",
    "title": "Class Functions | Data.Modeler API Reference",
    "keywords": "Class Functions Function builder, gets info and does diffs for Functions Inheritance object Functions Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class Functions : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer.SourceBuilders | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Classes CheckConstraints Check constraints source builder Functions Function builder, gets info and does diffs for Functions Schemas Schemas StoredProcedureColumns StoredProcedure column builder, gets info and does diffs for StoredProcedures StoredProcedures StoredProcedure builder, gets info and does diffs for StoredProcedures TableColumns Table column builder, gets info and does diffs for tables TableForeignKeys Table foreign keys, gets info and does diffs for tables TableTriggers Table trigger builder, gets info and does diffs for tables Tables Table builder, gets info and does diffs for tables Views View builder, gets info and does diffs for Views"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Schemas.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Schemas.html",
    "title": "Class Schemas | Data.Modeler API Reference",
    "keywords": "Class Schemas Schemas Inheritance object Schemas Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class Schemas : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also ISourceBuilder | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ISourceBuilder Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the source. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The data source. Exceptions Type Condition ArgumentNullException dataSource See Also ISourceBuilder | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source See Also ISourceBuilder Implements ISourceBuilder See Also ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedureColumns.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedureColumns.html",
    "title": "Class StoredProcedureColumns | Data.Modeler API Reference",
    "keywords": "Class StoredProcedureColumns StoredProcedure column builder, gets info and does diffs for StoredProcedures Inheritance object StoredProcedureColumns Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class StoredProcedureColumns : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedures.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedures.html",
    "title": "Class StoredProcedures | Data.Modeler API Reference",
    "keywords": "Class StoredProcedures StoredProcedure builder, gets info and does diffs for StoredProcedures Inheritance object StoredProcedures Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class StoredProcedures : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableColumns.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableColumns.html",
    "title": "Class TableColumns | Data.Modeler API Reference",
    "keywords": "Class TableColumns Table column builder, gets info and does diffs for tables Inheritance object TableColumns Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class TableColumns : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableForeignKeys.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableForeignKeys.html",
    "title": "Class TableForeignKeys | Data.Modeler API Reference",
    "keywords": "Class TableForeignKeys Table foreign keys, gets info and does diffs for tables Inheritance object TableForeignKeys Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class TableForeignKeys : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Tables.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Tables.html",
    "title": "Class Tables | Data.Modeler API Reference",
    "keywords": "Class Tables Table builder, gets info and does diffs for tables Inheritance object Tables Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class Tables : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableTriggers.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableTriggers.html",
    "title": "Class TableTriggers | Data.Modeler API Reference",
    "keywords": "Class TableTriggers Table trigger builder, gets info and does diffs for tables Inheritance object TableTriggers Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class TableTriggers : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Views.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Views.html",
    "title": "Class Views | Data.Modeler API Reference",
    "keywords": "Class Views View builder, gets info and does diffs for Views Inheritance object Views Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer.SourceBuilders Assembly: Data.Modeler.dll Syntax public class Views : ISourceBuilder Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source FillSource(List<dynamic>, ISource) Fills the database. Declaration public void FillSource(List<dynamic> values, ISource dataSource) Parameters Type Name Description List<dynamic> values The values. ISource dataSource The database. | Improve this Doc View Source GetCommand() Gets the command. Declaration public string GetCommand() Returns Type Description string The command to get the source Implements ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SQLServerSchemaGenerator.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SQLServerSchemaGenerator.html",
    "title": "Class SQLServerSchemaGenerator | Data.Modeler API Reference",
    "keywords": "Class SQLServerSchemaGenerator SQL Server schema generator Inheritance object SQLServerSchemaGenerator Implements ISchemaGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers.SQLServer Assembly: Data.Modeler.dll Syntax public class SQLServerSchemaGenerator : ISchemaGenerator Constructors | Improve this Doc View Source SQLServerSchemaGenerator(IEnumerable<ISourceBuilder>, IEnumerable<ICommandBuilder>, IConfiguration, SQLHelper, SQLHelper) Constructor Declaration public SQLServerSchemaGenerator(IEnumerable<ISourceBuilder> queryBuilders, IEnumerable<ICommandBuilder> commandBuilders, IConfiguration configuration, SQLHelper batch, SQLHelper oneOffQueries) Parameters Type Name Description IEnumerable<ISourceBuilder> queryBuilders The query builders. IEnumerable<ICommandBuilder> commandBuilders The command builders. IConfiguration configuration The configuration. SQLHelper batch The batch. SQLHelper oneOffQueries The one off queries. See Also ISchemaGenerator Properties | Improve this Doc View Source Configuration Gets the configuration. Declaration public IConfiguration Configuration { get; } Property Value Type Description IConfiguration The configuration. See Also ISchemaGenerator | Improve this Doc View Source Providers Provider name associated with the schema generator Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also ISchemaGenerator Methods | Improve this Doc View Source ConstraintExistsAsync(string, IConnection) Checks if a constraint exists Declaration public Task<bool> ConstraintExistsAsync(string constraint, IConnection source) Parameters Type Name Description string constraint The constraint to check. IConnection source Source to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator | Improve this Doc View Source GenerateSchema(ISource, ISource?) Generates a list of commands used to modify the source. If it does not exist prior, the commands will create the source from scratch. Otherwise the commands will only add new fields, tables, etc. It does not delete old fields. Declaration public string[] GenerateSchema(ISource desiredStructure, ISource? source) Parameters Type Name Description ISource desiredStructure Desired source structure ISource source Source to use Returns Type Description string[] List of commands generated See Also ISchemaGenerator | Improve this Doc View Source GetSourceStructureAsync(IConnection) Gets the structure of a source Declaration public Task<ISource?> GetSourceStructureAsync(IConnection connectionInfo) Parameters Type Name Description IConnection connectionInfo Source to use Returns Type Description Task<ISource> The source structure See Also ISchemaGenerator | Improve this Doc View Source SetupAsync(ISource, IConnection) Sets up the specified database schema Declaration public Task SetupAsync(ISource source, IConnection connection) Parameters Type Name Description ISource source The source. IConnection connection The connection. Returns Type Description Task See Also ISchemaGenerator | Improve this Doc View Source SetupAsync(string[], IConnection) Sets up the specified source. Declaration public Task SetupAsync(string[] schemaChanges, IConnection connection) Parameters Type Name Description string[] schemaChanges The schema changes. IConnection connection The connection. Returns Type Description Task See Also ISchemaGenerator | Improve this Doc View Source SourceExistsAsync(string, IConnection) Checks if a source exists Declaration public Task<bool> SourceExistsAsync(string source, IConnection connectionInfo) Parameters Type Name Description string source Source to check IConnection connectionInfo Source info to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator | Improve this Doc View Source StoredProcedureExistsAsync(string, IConnection) Checks if a stored procedure exists Declaration public Task<bool> StoredProcedureExistsAsync(string storedProcedure, IConnection connectionInfo) Parameters Type Name Description string storedProcedure Stored procedure to check IConnection connectionInfo Source to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator | Improve this Doc View Source TableExistsAsync(string, IConnection) Checks if a table exists Declaration public Task<bool> TableExistsAsync(string table, IConnection connectionInfo) Parameters Type Name Description string table Table to check IConnection connectionInfo Source to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator | Improve this Doc View Source TriggerExistsAsync(string, IConnection) Checks if a trigger exists Declaration public Task<bool> TriggerExistsAsync(string trigger, IConnection connectionInfo) Parameters Type Name Description string trigger Trigger to check IConnection connectionInfo Source to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator | Improve this Doc View Source ViewExistsAsync(string, IConnection) Checks if a view exists Declaration public Task<bool> ViewExistsAsync(string view, IConnection connectionInfo) Parameters Type Name Description string view View to check IConnection connectionInfo Source to use Returns Type Description Task<bool> True if it exists, false otherwise See Also ISchemaGenerator Implements ISchemaGenerator See Also ISchemaGenerator"
  },
  "api/Data.Modeler.Providers.StoredProcedure.html": {
    "href": "api/Data.Modeler.Providers.StoredProcedure.html",
    "title": "Class StoredProcedure | Data.Modeler API Reference",
    "keywords": "Class StoredProcedure StoredProcedure class Inheritance object TableBase StoredProcedure Implements ITable IFunction Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class StoredProcedure : TableBase, ITable, IFunction Constructors | Improve this Doc View Source StoredProcedure(string, string, string, ISource) Constructor Declaration public StoredProcedure(string name, string schema, string definition, ISource source) Parameters Type Name Description string name Name string schema The schema. string definition Definition of the stored procedure ISource source Source Properties | Improve this Doc View Source Definition Definition of the stored procedure Declaration public string Definition { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddCheckConstraint(string, string) Adds a check constraint to the table. Declaration public override ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters Type Name Description string name The name. string definition The definition. Returns Type Description ICheckConstraint The check constraint added to the table Overrides TableBase.AddCheckConstraint(string, string) | Improve this Doc View Source AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column Declaration public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters Type Name Description string columnName Column Name DbType columnType Data type int length Data length bool nullable Nullable? bool identity Identity? bool index Index? bool primaryKey Primary key? bool unique Unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade On Delete Cascade bool onUpdateCascade On Update Cascade bool onDeleteSetNull On Delete Set Null Returns Type Description IColumn Type Parameters Name Description T Column type Overrides TableBase.AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) | Improve this Doc View Source AddForeignKey(string, string, string) Adds a foreign key Declaration public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string columnName Column name string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column Overrides TableBase.AddForeignKey(string, string, string) | Improve this Doc View Source AddTrigger(string, string, TriggerType) Adds a trigger to the table Declaration public override ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters Type Name Description string name Name of the trigger string definition Definition of the trigger TriggerType type Trigger type Returns Type Description ITrigger The trigger specified Overrides TableBase.AddTrigger(string, string, TriggerType) | Improve this Doc View Source Copy(ISource) Copies this instance. Declaration public override ITable Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description ITable The copy of this instance. Overrides TableBase.Copy(ISource) | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ITable IFunction"
  },
  "api/Data.Modeler.Providers.Table.html": {
    "href": "api/Data.Modeler.Providers.Table.html",
    "title": "Class Table | Data.Modeler API Reference",
    "keywords": "Class Table Table class Inheritance object TableBase Table Implements ITable Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class Table : TableBase, ITable Constructors | Improve this Doc View Source Table(string, string, ISource) Constructor Declaration public Table(string name, string schema, ISource source) Parameters Type Name Description string name Name string schema The schema. ISource source Source Methods | Improve this Doc View Source AddCheckConstraint(string, string) Adds a check constraint to the table. Declaration public override ICheckConstraint AddCheckConstraint(string name, string definition) Parameters Type Name Description string name The name. string definition The definition. Returns Type Description ICheckConstraint The check constraint added to the table Overrides TableBase.AddCheckConstraint(string, string) | Improve this Doc View Source AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column Declaration public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters Type Name Description string columnName Column Name DbType columnType Data type int length Data length bool nullable Nullable? bool identity Identity? bool index Index? bool primaryKey Primary key? bool unique Unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade On Delete Cascade bool onUpdateCascade On Update Cascade bool onDeleteSetNull On Delete Set Null Returns Type Description IColumn Type Parameters Name Description T Column type Overrides TableBase.AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) | Improve this Doc View Source AddForeignKey(string, string, string) Adds a foreign key Declaration public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string columnName Column name string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column Overrides TableBase.AddForeignKey(string, string, string) | Improve this Doc View Source AddTrigger(string, string, TriggerType) Adds a trigger to the table Declaration public override ITrigger AddTrigger(string name, string definition, TriggerType type) Parameters Type Name Description string name Name of the trigger string definition Definition of the trigger TriggerType type Trigger type Returns Type Description ITrigger The trigger specified Overrides TableBase.AddTrigger(string, string, TriggerType) | Improve this Doc View Source Copy(ISource) Copies this instance. Declaration public override ITable Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description ITable The copy of this instance. Overrides TableBase.Copy(ISource) | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ITable"
  },
  "api/Data.Modeler.Providers.Trigger.html": {
    "href": "api/Data.Modeler.Providers.Trigger.html",
    "title": "Class Trigger | Data.Modeler API Reference",
    "keywords": "Class Trigger Trigger class Inheritance object Trigger Implements ITrigger Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class Trigger : ITrigger Constructors | Improve this Doc View Source Trigger(string, string, TriggerType, ITable) Constructor Declaration public Trigger(string name, string definition, TriggerType type, ITable parentTable) Parameters Type Name Description string name Name string definition Definition TriggerType type Type ITable parentTable Parent table Properties | Improve this Doc View Source Definition Definition of the trigger Declaration public string Definition { get; set; } Property Value Type Description string | Improve this Doc View Source Name Name of the trigger Declaration public string Name { get; set; } Property Value Type Description string | Improve this Doc View Source ParentTable Parent table Declaration public ITable ParentTable { get; set; } Property Value Type Description ITable | Improve this Doc View Source Type Trigger type Declaration public TriggerType Type { get; set; } Property Value Type Description TriggerType Methods | Improve this Doc View Source Copy(ITable) Copies this instance Declaration public ITrigger Copy(ITable parentTable) Parameters Type Name Description ITable parentTable The new parent table. Returns Type Description ITrigger The copy | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ITrigger"
  },
  "api/Data.Modeler.Providers.View.html": {
    "href": "api/Data.Modeler.Providers.View.html",
    "title": "Class View | Data.Modeler API Reference",
    "keywords": "Class View View class Inheritance object TableBase View Implements ITable IFunction Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Data.Modeler.Providers Assembly: Data.Modeler.dll Syntax public class View : TableBase, ITable, IFunction Constructors | Improve this Doc View Source View(string, string, string, ISource) Constructor Declaration public View(string name, string schema, string definition, ISource source) Parameters Type Name Description string name Name string schema The schema. string definition The definition. ISource source Source Properties | Improve this Doc View Source Definition Definition of the view Declaration public string Definition { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddCheckConstraint(string, string) Adds a check constraint to the table. Declaration public override ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters Type Name Description string name The name. string definition The definition. Returns Type Description ICheckConstraint The check constraint added to the table Overrides TableBase.AddCheckConstraint(string, string) | Improve this Doc View Source AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column Declaration public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters Type Name Description string columnName Column Name DbType columnType Data type int length Data length bool nullable Nullable? bool identity Identity? bool index Index? bool primaryKey Primary key? bool unique Unique? string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column T defaultValue Default value string computedColumnSpecification The computed column specification. bool onDeleteCascade On Delete Cascade bool onUpdateCascade On Update Cascade bool onDeleteSetNull On Delete Set Null Returns Type Description IColumn Type Parameters Name Description T Column type Overrides TableBase.AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) | Improve this Doc View Source AddForeignKey(string, string, string) Adds a foreign key Declaration public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters Type Name Description string columnName Column name string foreignKeyTable Foreign key table string foreignKeyColumn Foreign key column Overrides TableBase.AddForeignKey(string, string, string) | Improve this Doc View Source AddTrigger(string, string, TriggerType) Adds a trigger to the table Declaration public override ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters Type Name Description string name Name of the trigger string definition Definition of the trigger TriggerType type Trigger type Returns Type Description ITrigger The trigger specified Overrides TableBase.AddTrigger(string, string, TriggerType) | Improve this Doc View Source Copy(ISource) Copies this instance. Declaration public override ITable Copy(ISource source) Parameters Type Name Description ISource source The source. Returns Type Description ITable The copy of this instance. Overrides TableBase.Copy(ISource) | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements ITable IFunction"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Data.Modeler API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Data.Modeler API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes RegistrationExtensions Registration extension methods"
  },
  "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html",
    "title": "Class RegistrationExtensions | Data.Modeler API Reference",
    "keywords": "Class RegistrationExtensions Registration extension methods Inheritance object RegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Data.Modeler.dll Syntax public static class RegistrationExtensions Methods | Improve this Doc View Source RegisterDataModeler(ICanisterConfiguration?) Registers the library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterDataModeler(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Data.Modeler API Reference",
    "keywords": "Code using Microsoft.Extensions.DependencyInjection; using System.Data; using System.Data.SqlClient; namespace Data.Modeler.Example { /// <summary> /// This is an example of how to use the Data.Modeler library to generate SQL commands to create a database schema. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create a service provider using the Canister configuration var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Create a data modeler instance from the service provider var DataModeler = Services?.GetService<DataModeler>(); // Create a schema provider for SQL Server using the SQL Client Factory var SchemaProvider = DataModeler.GetSchemaGenerator(SqlClientFactory.Instance); // And let's define the database schema that we want to generate var Source = DataModeler.CreateSource(\"MySource\"); // Add a table to the source with the specified name and schema var Table = Source.AddTable(\"TableName\", \"dbo\"); // Add a column to the table with the specified name and type var Column = Table.AddColumn<int>(\"ColumnName\", DbType.Int32); // Check constraints can be added to a table along with keys and indexes var CheckConstraint = Table.AddCheckConstraint(\"CheckConstraintName\", \"Check Constraint Definition\"); // A view is treated similarly to a table var View = Source.AddView(\"ViewName\", \"View Creation Code\", \"dbo\"); // Functions can be added to the source var Function = Source.AddFunction(\"FunctionName\", \"Function Creation Code\", \"dbo\"); // We can also add a stored procedure to the source var StoredProcedure = Source.AddStoredProcedure(\"StoredProcedureName\", \"Stored Procedure Creation Code\", \"dbo\"); // Generate the SQL commands to create the database based on the source schema model var DatabaseGenerationCommands = SchemaProvider.GenerateSchema(Source, null); foreach (var Command in DatabaseGenerationCommands) { // We're writing the SQL command out but we could also execute it against a database Console.WriteLine(Command); } } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Data.Modeler | Data.Modeler API Reference",
    "keywords": "Data.Modeler Data.Modeler is a library used to interact with model database schemas in C#. Works with .Net Core. Basic Usage In order to use Data.Modeler, you need to first wire up the system with your ServiceCollection. In order to do this, all you need to do is make one method call: serviceCollection.AddCanisterModules(); This line is required prior to using the DataModeler class for the first time. Once Canister is set up, you can call the DataModeler class provided: var SchemaProvider = DataModeler.GetSchemaGenerator(SqlClientFactory.Instance); Note that the above gets the schema provider for SQL Server but for other databases you must provide the DbProviderFactory associated with it. You can also start creating a schema: var Source = DataModeler.CreateSource(\"MySource\"); The \"MySource\" string is the database name that you wish to use. Creating a Schema Once you have your ISource object, you can start adding on to it: var Table = Source.AddTable(\"TableName\", \"dbo\"); var Column = Table.AddColumn<int>(\"ColumnName\",DbType.Int32); var CheckConstraint = Table.AddCheckConstraint(\"CheckConstraintName\", \"Check Constraint Definition\"); var View = Source.AddView(\"ViewName\",\"View Creation Code\", \"dbo\"); var Function = Source.AddFunction(\"FunctionName\",\"Function Creation Code\", \"dbo\"); var StoredProcedure = Source.AddStoredProcedure(\"StoredProcedureName\",\"Stored Procedure Creation Code\", \"dbo\"); From there the schema provider can be used to either generate the commands needed to create the database or what commands are needed to alter an existing database to the desired schema: var MyCommands = SchemaProvider.GenerateSchema(DesiredSchema, SourceSchema); If SourceSchema is null, then it will treat it as the database doesn't exist. If the SourceSchema is not null, it will act as though the database exists and the DesiredSchema is what you want the final schema to look like. Note that deleting columns, tables, etc. is not done by the system. It will, however, generate calls to drop functions, stored procedures, views, constraints, etc. if they need to be updated. Another thing you can do is have the system apply those changes for you: SchemaProvider.Setup(DesiredSchema,new Connection(Configuration, SqlClientFactory.Instance, \"Default\")); The connection object must be fed a IConfiguration object, a DbProviderFactory for the database type you wish it to connect to, and either the name of your connection string in the configuration object or a connection string: SchemaProvider.Setup(DesiredSchema,new Connection(Configuration, SqlClientFactory.Instance, \"Data Source=localhost;Initial Catalog=ExampleDatabase;Integrated Security=SSPI;Pooling=false\")); Adding a ISchemaGenerator The schema generator is what the system uses to generate the individual commands. Data.Modeler comes with one for SQL Server but in order to add your own you must create a class that inherits from ISchemaGenerator. From there the system will automatically pick up the schema generator and allow you to use it: var SchemaProvider = DataModeler.GetSchemaGenerator(MyDbFactoryProvider); Note that you can also create one for SQL Server and the system will actually return the one that you create instead of the one built into the system. Installation The library is available via Nuget with the package name \"Data.Modeler\". To install it run the following command in the Package Manager Console: Install-Package Data.Modeler Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}