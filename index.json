{
  "api/Data.Modeler.DataModeler.html": {
    "href": "api/Data.Modeler.DataModeler.html",
    "title": "Class DataModeler | Data.Modeler API Reference",
    "keywords": "Class DataModeler Namespace Data.Modeler Assembly Data.Modeler.dll Data modeler class. public class DataModeler Inheritance object DataModeler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataModeler(IEnumerable<ISchemaGenerator>) Initializes a new instance of the DataModeler class. public DataModeler(IEnumerable<ISchemaGenerator> generators) Parameters generators IEnumerable<ISchemaGenerator> The generators. Methods CreateSource(string) Creates the source. public static ISource CreateSource(string name) Parameters name string The name. Returns ISource The source requested. GetSchemaGenerator(DbProviderFactory) Gets the schema generator based on the DbProviderFactory sent in. public ISchemaGenerator? GetSchemaGenerator(DbProviderFactory factory) Parameters factory DbProviderFactory The DbProviderFactory. Returns ISchemaGenerator The requested schema generator"
  },
  "api/Data.Modeler.Modules.DataModelerModule.html": {
    "href": "api/Data.Modeler.Modules.DataModelerModule.html",
    "title": "Class DataModelerModule | Data.Modeler API Reference",
    "keywords": "Class DataModelerModule Namespace Data.Modeler.Modules Assembly Data.Modeler.dll Data modeler module public class DataModelerModule : IModule Inheritance object DataModelerModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Data modeler module Methods Load(IServiceCollection) Loads the module using the bootstrapper public void Load(IServiceCollection bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/Data.Modeler.Modules.html": {
    "href": "api/Data.Modeler.Modules.html",
    "title": "Namespace Data.Modeler.Modules | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Modules Classes DataModelerModule Data modeler module"
  },
  "api/Data.Modeler.Providers.BaseClasses.SourceBase.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.SourceBase.html",
    "title": "Class SourceBase | Data.Modeler API Reference",
    "keywords": "Class SourceBase Namespace Data.Modeler.Providers.BaseClasses Assembly Data.Modeler.dll Source base class public abstract class SourceBase : ISource Inheritance object SourceBase Implements ISource Derived Source Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SourceBase(string) Constructor protected SourceBase(string name) Parameters name string The name. Properties Functions Functions with the source public List<IFunction> Functions { get; } Property Value List<IFunction> Source base class this[string] Gets a specific table based on the name public ITable this[string name] { get; } Parameters name string Name of the table Property Value ITable The table specified Name Name of the source public string Name { get; set; } Property Value string Source base class Schemas Gets the schemas. public List<string> Schemas { get; } Property Value List<string> The schemas. StoredProcedures Stored procedures within the source public List<IFunction> StoredProcedures { get; } Property Value List<IFunction> Source base class Tables Tables within the source public List<ITable> Tables { get; } Property Value List<ITable> Source base class Views Views within the source public List<IFunction> Views { get; } Property Value List<IFunction> Source base class Methods AddFunction(string, string, string) Adds a function to the source public abstract IFunction AddFunction(string name, string schemaName, string definition) Parameters name string Name of the function schemaName string Name of the schema. definition string Definition of the function Returns IFunction Function that was created/added AddStoredProcedure(string, string, string) Adds a stored procedure to the source public abstract IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters procedureName string Procedure name schemaName string Name of the schema. definition string Definition of the stored procedure Returns IFunction Stored procedure that was created/added AddTable(string, string) Adds a table to the source public abstract ITable AddTable(string tableName, string schemaName) Parameters tableName string Table name schemaName string Name of the schema. Returns ITable Table that was created/added AddView(string, string, string) Adds a view to the source public abstract IFunction AddView(string viewName, string schemaName, string definition) Parameters viewName string View name schemaName string Name of the schema. definition string The definition. Returns IFunction View that was created/added Copy() Copies this instance. public ISource Copy() Returns ISource A copy of this instance."
  },
  "api/Data.Modeler.Providers.BaseClasses.TableBase.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.TableBase.html",
    "title": "Class TableBase | Data.Modeler API Reference",
    "keywords": "Class TableBase Namespace Data.Modeler.Providers.BaseClasses Assembly Data.Modeler.dll Table base class public abstract class TableBase : ITable Inheritance object TableBase Implements ITable Derived StoredProcedure Table View Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TableBase(string, string, ISource) Constructor protected TableBase(string name, string schema, ISource source) Parameters name string Name of the table schema string The schema. source ISource Source that the table is from Properties Audit Gets a value indicating whether this is audit. public bool Audit { get; set; } Property Value bool true if audit; otherwise, false. Columns Columns public List<IColumn> Columns { get; } Property Value List<IColumn> Table base class Constraints Gets the constraints. public List<ICheckConstraint> Constraints { get; } Property Value List<ICheckConstraint> The constraints. this[string] The column specified public IColumn this[string name] { get; } Parameters name string Name of the column Property Value IColumn The column specified Name Name of the table public string Name { get; set; } Property Value string Table base class Schema Gets or sets the schema. public string Schema { get; } Property Value string The schema. Source Source/Parent public ISource Source { get; } Property Value ISource Table base class Triggers List of triggers associated with the table public List<ITrigger> Triggers { get; } Property Value List<ITrigger> Table base class Methods AddCheckConstraint(string, string) Adds a check constraint to the table. public abstract ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters name string The name. definition string The definition. Returns ICheckConstraint The check constraint added to the table AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column public abstract IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters columnName string Column Name columnType DbType Data type length int Data length nullable bool Nullable? identity bool Identity? index bool Index? primaryKey bool Primary key? unique bool Unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool On Delete Cascade onUpdateCascade bool On Update Cascade onDeleteSetNull bool On Delete Set Null Returns IColumn Type Parameters T Column type AddForeignKey(string, string, string) Adds a foreign key public abstract void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters columnName string Column name foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column AddTrigger(string, string, TriggerType) Adds a trigger to the table public abstract ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters name string Name of the trigger definition string Definition of the trigger type TriggerType Trigger type Returns ITrigger The trigger specified ContainsColumn(string) Determines if a column exists in the table public bool ContainsColumn(string columnName) Parameters columnName string Column name Returns bool True if it exists, false otherwise Copy(ISource) Copies this instance. public abstract ITable Copy(ISource source) Parameters source ISource The source. Returns ITable The copy of this instance. SetupForeignKeys() Sets up foreign keys public void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.BaseClasses.html": {
    "href": "api/Data.Modeler.Providers.BaseClasses.html",
    "title": "Namespace Data.Modeler.Providers.BaseClasses | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.BaseClasses Classes SourceBase Source base class TableBase Table base class"
  },
  "api/Data.Modeler.Providers.CheckConstraint.html": {
    "href": "api/Data.Modeler.Providers.CheckConstraint.html",
    "title": "Class CheckConstraint | Data.Modeler API Reference",
    "keywords": "Class CheckConstraint Namespace Data.Modeler.Providers Assembly Data.Modeler.dll CheckConstraint class public class CheckConstraint : ICheckConstraint Inheritance object CheckConstraint Implements ICheckConstraint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CheckConstraint(string, string, ITable) Constructor public CheckConstraint(string name, string definition, ITable parentTable) Parameters name string Name definition string Definition parentTable ITable Parent table Properties Definition Definition of the CheckConstraint public string Definition { get; set; } Property Value string CheckConstraint class Name Name of the CheckConstraint public string Name { get; set; } Property Value string CheckConstraint class ParentTable Parent table public ITable ParentTable { get; set; } Property Value ITable CheckConstraint class Methods Copy(ITable) Copies this instance public ICheckConstraint Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns ICheckConstraint The copy Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.Column-1.html": {
    "href": "api/Data.Modeler.Providers.Column-1.html",
    "title": "Class Column<T> | Data.Modeler API Reference",
    "keywords": "Class Column<T> Namespace Data.Modeler.Providers Assembly Data.Modeler.dll Column class public class Column<T> : IColumn Type Parameters T Data type of the column Inheritance object Column<T> Implements IColumn Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Column(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool, ITable) Constructor public Column(string name, DbType columnType, int length, bool nullable, bool identity, bool index, bool primaryKey, bool unique, string foreignKeyTable, string foreignKeyColumn, T defaultValue, string computedColumnSpecification, bool onDeleteCascade, bool onUpdateCascade, bool onDeleteSetNull, ITable parentTable) Parameters name string Name of the column columnType DbType The data type length int The data length nullable bool Is it nullable? identity bool Is it an identity? index bool Is it the index? primaryKey bool Is it the primary key? unique bool Is it unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool Cascade on delete onUpdateCascade bool Cascade on update onDeleteSetNull bool Set null on delete parentTable ITable Parent table Properties AutoIncrement Auto increment? public bool AutoIncrement { get; set; } Property Value bool Column class ComputedColumnSpecification Gets the computed column specificaation. public string ComputedColumnSpecification { get; } Property Value string The computed column specificaation. DataType Data type public DbType DataType { get; set; } Property Value DbType Column class Default Default value public string Default { get; set; } Property Value string Column class ForeignKey Foreign keys public List<IColumn> ForeignKey { get; } Property Value List<IColumn> Column class Index Index? public bool Index { get; set; } Property Value bool Column class Length Data length public int Length { get; set; } Property Value int Column class Name Name public string Name { get; set; } Property Value string Column class Nullable Nullable? public bool Nullable { get; set; } Property Value bool Column class OnDeleteCascade On Delete Cascade public bool OnDeleteCascade { get; set; } Property Value bool Column class OnDeleteSetNull On Delete Set Null public bool OnDeleteSetNull { get; set; } Property Value bool Column class OnUpdateCascade On Update Cascade public bool OnUpdateCascade { get; set; } Property Value bool Column class ParentTable Parent table public ITable ParentTable { get; set; } Property Value ITable Column class PrimaryKey Primary key? public bool PrimaryKey { get; set; } Property Value bool Column class Unique Unique? public bool Unique { get; set; } Property Value bool Column class Methods AddForeignKey(string, string) Add foreign key public void AddForeignKey(string foreignKeyTable, string foreignKeyColumn) Parameters foreignKeyTable string Table of the foreign key foreignKeyColumn string Column of the foreign key Copy(ITable) Copies this instance public IColumn Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns IColumn The copy Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. SetupForeignKeys() Sets up the foreign key list public void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.Enums.TriggerType.html": {
    "href": "api/Data.Modeler.Providers.Enums.TriggerType.html",
    "title": "Enum TriggerType | Data.Modeler API Reference",
    "keywords": "Enum TriggerType Namespace Data.Modeler.Providers.Enums Assembly Data.Modeler.dll The type of trigger public enum TriggerType Fields Delete = 3 Delete Insert = 1 Insert Update = 2 Update"
  },
  "api/Data.Modeler.Providers.Enums.html": {
    "href": "api/Data.Modeler.Providers.Enums.html",
    "title": "Namespace Data.Modeler.Providers.Enums | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.Enums Enums TriggerType The type of trigger"
  },
  "api/Data.Modeler.Providers.Function.html": {
    "href": "api/Data.Modeler.Providers.Function.html",
    "title": "Class Function | Data.Modeler API Reference",
    "keywords": "Class Function Namespace Data.Modeler.Providers Assembly Data.Modeler.dll Function class public class Function : IFunction Inheritance object Function Implements IFunction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Function(string, string, string, ISource) Constructor public Function(string name, string schema, string definition, ISource source) Parameters name string Name schema string The schema. definition string Definition source ISource Source Properties Definition Definition of the Function public string Definition { get; set; } Property Value string Function class Name Name of the Function public string Name { get; set; } Property Value string Function class Schema Gets the name of the schema. public string Schema { get; } Property Value string The name of the schema. Source Source public ISource Source { get; set; } Property Value ISource Function class Methods Copy(ISource) Copies the specified instance public IFunction Copy(ISource source) Parameters source ISource The source. Returns IFunction The copy Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.Interfaces.ICheckConstraint.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ICheckConstraint.html",
    "title": "Interface ICheckConstraint | Data.Modeler API Reference",
    "keywords": "Interface ICheckConstraint Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Check constraint interface public interface ICheckConstraint Properties Definition Gets or sets the definition. string Definition { get; set; } Property Value string The definition. Name Gets or sets the name. string Name { get; set; } Property Value string The name. ParentTable Parent table ITable ParentTable { get; set; } Property Value ITable The parent table. Methods Copy(ITable) Copies this instance ICheckConstraint Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns ICheckConstraint The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.IColumn.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.IColumn.html",
    "title": "Interface IColumn | Data.Modeler API Reference",
    "keywords": "Interface IColumn Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Column interface public interface IColumn Properties AutoIncrement Auto increment? bool AutoIncrement { get; set; } Property Value bool Column interface ComputedColumnSpecification Gets the computed column specification (if one exists). string ComputedColumnSpecification { get; } Property Value string The computed column specification (if one exists). DataType Data type DbType DataType { get; set; } Property Value DbType Column interface Default Default value string Default { get; set; } Property Value string Column interface ForeignKey Foreign keys List<IColumn> ForeignKey { get; } Property Value List<IColumn> Column interface Index Index? bool Index { get; set; } Property Value bool Column interface Length Data length int Length { get; set; } Property Value int Column interface Name Name string Name { get; set; } Property Value string Column interface Nullable Nullable? bool Nullable { get; set; } Property Value bool Column interface OnDeleteCascade On Delete Cascade bool OnDeleteCascade { get; set; } Property Value bool Column interface OnDeleteSetNull On Delete Set Null bool OnDeleteSetNull { get; set; } Property Value bool Column interface OnUpdateCascade On Update Cascade bool OnUpdateCascade { get; set; } Property Value bool Column interface ParentTable Parent table ITable ParentTable { get; set; } Property Value ITable Column interface PrimaryKey Primary key? bool PrimaryKey { get; set; } Property Value bool Column interface Unique Unique? bool Unique { get; set; } Property Value bool Column interface Methods AddForeignKey(string, string) Add foreign key void AddForeignKey(string foreignKeyTable, string foreignKeyColumn) Parameters foreignKeyTable string Table of the foreign key foreignKeyColumn string Column of the foreign key Copy(ITable) Copies this instance IColumn Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns IColumn The copy SetupForeignKeys() Sets up the foreign key list void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.Interfaces.ICommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ICommandBuilder.html",
    "title": "Interface ICommandBuilder | Data.Modeler API Reference",
    "keywords": "Interface ICommandBuilder Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Builder interface Helps with simplifying command building public interface ICommandBuilder Properties Order Gets the order. int Order { get; } Property Value int The order. Providers Gets the provider this source builder supports DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] The provider. Methods GetCommands(ISource, ISource?) Gets the commands. string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure"
  },
  "api/Data.Modeler.Providers.Interfaces.IFunction.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.IFunction.html",
    "title": "Interface IFunction | Data.Modeler API Reference",
    "keywords": "Interface IFunction Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Function class public interface IFunction Properties Definition Definition string Definition { get; set; } Property Value string Function class Name Name string Name { get; set; } Property Value string Function class Schema Gets the name of the schema. string Schema { get; } Property Value string The name of the schema. Source Parent database ISource Source { get; } Property Value ISource Function class Methods Copy(ISource) Copies the specified instance IFunction Copy(ISource source) Parameters source ISource The source. Returns IFunction The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.ISchemaGenerator.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISchemaGenerator.html",
    "title": "Interface ISchemaGenerator | Data.Modeler API Reference",
    "keywords": "Interface ISchemaGenerator Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Schema generator interface public interface ISchemaGenerator Properties Providers Provider associated with the schema generator DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Schema generator interface Methods GenerateSchema(ISource, ISource) Generates a list of commands used to modify the source. If it does not exist prior, the commands will create the source from scratch. Otherwise the commands will only add new fields, tables, etc. It does not delete old fields. string[] GenerateSchema(ISource desiredStructure, ISource source) Parameters desiredStructure ISource Desired source structure source ISource Source to use Returns string[] List of commands generated GetSourceStructureAsync(IConnection) Gets the structure of a source Task<ISource?> GetSourceStructureAsync(IConnection connectionInfo) Parameters connectionInfo IConnection The connection information. Returns Task<ISource> The source structure SetupAsync(ISource, IConnection) Sets up the specified source. Task SetupAsync(ISource source, IConnection connection) Parameters source ISource The source. connection IConnection The connection. Returns Task Schema generator interface SetupAsync(string[], IConnection) Sets up the specified source. Task SetupAsync(string[] schemaChanges, IConnection connection) Parameters schemaChanges string[] The schema changes. connection IConnection The connection. Returns Task Schema generator interface SourceExistsAsync(string, IConnection) Checks if a source exists Task<bool> SourceExistsAsync(string source, IConnection connectionInfo) Parameters source string The source. connectionInfo IConnection The connection. Returns Task<bool> True if it exists, false otherwise StoredProcedureExistsAsync(string, IConnection) Checks if a stored procedure exists Task<bool> StoredProcedureExistsAsync(string storedProcedure, IConnection connectionInfo) Parameters storedProcedure string Stored procedure to check connectionInfo IConnection The connection information. Returns Task<bool> True if it exists, false otherwise TableExistsAsync(string, IConnection) Checks if a table exists Task<bool> TableExistsAsync(string table, IConnection connectionInfo) Parameters table string Table to check connectionInfo IConnection The connection information. Returns Task<bool> True if it exists, false otherwise TriggerExistsAsync(string, IConnection) Checks if a trigger exists Task<bool> TriggerExistsAsync(string trigger, IConnection connectionInfo) Parameters trigger string Trigger to check connectionInfo IConnection The connection information. Returns Task<bool> True if it exists, false otherwise ViewExistsAsync(string, IConnection) Checks if a view exists Task<bool> ViewExistsAsync(string view, IConnection connectionInfo) Parameters view string View to check connectionInfo IConnection The connection information. Returns Task<bool> True if it exists, false otherwise"
  },
  "api/Data.Modeler.Providers.Interfaces.ISource.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISource.html",
    "title": "Interface ISource | Data.Modeler API Reference",
    "keywords": "Interface ISource Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Interface for source objects (like databases) public interface ISource Properties Functions List of functions List<IFunction> Functions { get; } Property Value List<IFunction> Interface for source objects (like databases) this[string] Returns a table with the given name ITable this[string name] { get; } Parameters name string Table name Property Value ITable The table specified Name Name string Name { get; set; } Property Value string Interface for source objects (like databases) Schemas Gets the schemas. List<string> Schemas { get; } Property Value List<string> The schemas. StoredProcedures List of stored procedures List<IFunction> StoredProcedures { get; } Property Value List<IFunction> Interface for source objects (like databases) Tables List of tables List<ITable> Tables { get; } Property Value List<ITable> Interface for source objects (like databases) Views List of views List<IFunction> Views { get; } Property Value List<IFunction> Interface for source objects (like databases) Methods AddFunction(string, string, string) Adds a function to the database IFunction AddFunction(string name, string schemaName, string definition) Parameters name string Function name schemaName string Name of the schema. definition string Function definition Returns IFunction AddStoredProcedure(string, string, string) Adds a stored procedure to the database IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters procedureName string Procedure name schemaName string Name of the schema. definition string Definition Returns IFunction AddTable(string, string) Adds a table to the database ITable AddTable(string tableName, string schemaName) Parameters tableName string Table name schemaName string Name of the schema. Returns ITable AddView(string, string, string) Adds a view to the database IFunction AddView(string viewName, string schemaName, string definition) Parameters viewName string View name schemaName string Name of the schema. definition string The definition. Returns IFunction The view that is created Copy() Copies this instance ISource Copy() Returns ISource The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.ISourceBuilder.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ISourceBuilder.html",
    "title": "Interface ISourceBuilder | Data.Modeler API Reference",
    "keywords": "Interface ISourceBuilder Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Builder interface Helps with simplifying schema building public interface ISourceBuilder Properties Order Gets the order. int Order { get; } Property Value int The order. Providers Gets the provider this source builder supports DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] The provider. Methods FillSource(List<dynamic>, ISource) Fills the source. void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The data source. GetCommand() Gets the command. string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.Interfaces.ITable.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ITable.html",
    "title": "Interface ITable | Data.Modeler API Reference",
    "keywords": "Interface ITable Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Interface for table like structures public interface ITable Properties Audit Gets a value indicating whether this ITable is audit. bool Audit { get; set; } Property Value bool true if audit; otherwise, false. Columns Columns List<IColumn> Columns { get; } Property Value List<IColumn> The columns. Constraints Gets the constraints. List<ICheckConstraint> Constraints { get; } Property Value List<ICheckConstraint> The constraints. this[string] Returns the specified column IColumn this[string name] { get; } Parameters name string Name of the column Property Value IColumn Column specified Name Name string Name { get; set; } Property Value string The name. Schema Gets or sets the schema. string Schema { get; } Property Value string The schema. Source Parent of the table structure ISource Source { get; } Property Value ISource The source. Triggers Triggers associated with the table (if source supports them) List<ITrigger> Triggers { get; } Property Value List<ITrigger> The triggers. Methods AddCheckConstraint(string, string) Adds a check constraint to the table. ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters name string The name. definition string The definition. Returns ICheckConstraint The check constraint added to the table AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters columnName string Column Name columnType DbType Data type length int Data length nullable bool Nullable? identity bool Identity? index bool Index? primaryKey bool Primary key? unique bool Unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool On Delete Cascade onUpdateCascade bool On Update Cascade onDeleteSetNull bool On Delete Set Null Returns IColumn Type Parameters T Column type AddForeignKey(string, string, string) Adds a foreign key void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters columnName string Column name foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column AddTrigger(string, string, TriggerType) Adds a trigger to the table ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters name string Name of the trigger definition string Trigger definition type TriggerType Trigger type Returns ITrigger Trigger added to the table ContainsColumn(string) Determines if a column exists in the table bool ContainsColumn(string columnName) Parameters columnName string Column name Returns bool True if it exists, false otherwise Copy(ISource) Copies this instance. ITable Copy(ISource source) Parameters source ISource The source. Returns ITable The copy of this instance. SetupForeignKeys() Sets up foreign keys void SetupForeignKeys()"
  },
  "api/Data.Modeler.Providers.Interfaces.ITrigger.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.ITrigger.html",
    "title": "Interface ITrigger | Data.Modeler API Reference",
    "keywords": "Interface ITrigger Namespace Data.Modeler.Providers.Interfaces Assembly Data.Modeler.dll Trigger interface public interface ITrigger Properties Definition Definition string Definition { get; set; } Property Value string Trigger interface Name Name string Name { get; set; } Property Value string Trigger interface ParentTable Parent table ITable ParentTable { get; set; } Property Value ITable Trigger interface Type Trigger type TriggerType Type { get; set; } Property Value TriggerType Trigger interface Methods Copy(ITable) Copies this instance ITrigger Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns ITrigger The copy"
  },
  "api/Data.Modeler.Providers.Interfaces.html": {
    "href": "api/Data.Modeler.Providers.Interfaces.html",
    "title": "Namespace Data.Modeler.Providers.Interfaces | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.Interfaces Interfaces ICheckConstraint Check constraint interface IColumn Column interface ICommandBuilder Builder interface Helps with simplifying command building IFunction Function class ISchemaGenerator Schema generator interface ISource Interface for source objects (like databases) ISourceBuilder Builder interface Helps with simplifying schema building ITable Interface for table like structures ITrigger Trigger interface"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CheckConstraintCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CheckConstraintCommandBuilder.html",
    "title": "Class CheckConstraintCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CheckConstraintCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll CheckConstraint command builder public class CheckConstraintCommandBuilder : ICommandBuilder Inheritance object CheckConstraintCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CheckConstraintCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CheckConstraintCommandBuilder class. public CheckConstraintCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] CheckConstraint command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateDatabaseCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateDatabaseCommandBuilder.html",
    "title": "Class CreateDatabaseCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateDatabaseCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Create database command builder public class CreateDatabaseCommandBuilder : ICommandBuilder Inheritance object CreateDatabaseCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateDatabaseCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateDatabaseCommandBuilder class. public CreateDatabaseCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Create database command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateFunctionCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateFunctionCommandBuilder.html",
    "title": "Class CreateFunctionCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateFunctionCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Function command builder public class CreateFunctionCommandBuilder : ICommandBuilder Inheritance object CreateFunctionCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateFunctionCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateFunctionCommandBuilder class. public CreateFunctionCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Function command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateSchemaCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateSchemaCommandBuilder.html",
    "title": "Class CreateSchemaCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateSchemaCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Function command builder public class CreateSchemaCommandBuilder : ICommandBuilder Inheritance object CreateSchemaCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateSchemaCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateSchemaCommandBuilder class. public CreateSchemaCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Function command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateViewCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.CreateViewCommandBuilder.html",
    "title": "Class CreateViewCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class CreateViewCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Create view command builder public class CreateViewCommandBuilder : ICommandBuilder Inheritance object CreateViewCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateViewCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the CreateViewCommandBuilder class. public CreateViewCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Create view command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.ForeignKeyCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.ForeignKeyCommandBuilder.html",
    "title": "Class ForeignKeyCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class ForeignKeyCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Foreign key command builder public class ForeignKeyCommandBuilder : ICommandBuilder Inheritance object ForeignKeyCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForeignKeyCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the ForeignKeyCommandBuilder class. public ForeignKeyCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Foreign key command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.StoredProcedureCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.StoredProcedureCommandBuilder.html",
    "title": "Class StoredProcedureCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class StoredProcedureCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Stored procedure command builder public class StoredProcedureCommandBuilder : ICommandBuilder Inheritance object StoredProcedureCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoredProcedureCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the StoredProcedureCommandBuilder class. public StoredProcedureCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Stored procedure command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TableCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TableCommandBuilder.html",
    "title": "Class TableCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class TableCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Table command builder public class TableCommandBuilder : ICommandBuilder Inheritance object TableCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TableCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the TableCommandBuilder class. public TableCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Table command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TriggerCommandBuilder.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.TriggerCommandBuilder.html",
    "title": "Class TriggerCommandBuilder | Data.Modeler API Reference",
    "keywords": "Class TriggerCommandBuilder Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Assembly Data.Modeler.dll Trigger command builder public class TriggerCommandBuilder : ICommandBuilder Inheritance object TriggerCommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerCommandBuilder(ObjectPool<StringBuilder>) Initializes a new instance of the TriggerCommandBuilder class. public TriggerCommandBuilder(ObjectPool<StringBuilder> objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Properties ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Trigger command builder Methods GetCommands(ISource, ISource?) Gets the commands. public string[] GetCommands(ISource desiredStructure, ISource? currentStructure) Parameters desiredStructure ISource The desired structure. currentStructure ISource The current structure. Returns string[] The list of commands needed to change the structure from the current to the desired structure See Also ICommandBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.CommandBuilders.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.CommandBuilders.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer.CommandBuilders | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer.CommandBuilders Classes CheckConstraintCommandBuilder CheckConstraint command builder CreateDatabaseCommandBuilder Create database command builder CreateFunctionCommandBuilder Function command builder CreateSchemaCommandBuilder Function command builder CreateViewCommandBuilder Create view command builder ForeignKeyCommandBuilder Foreign key command builder StoredProcedureCommandBuilder Stored procedure command builder TableCommandBuilder Table command builder TriggerCommandBuilder Trigger command builder"
  },
  "api/Data.Modeler.Providers.SQLServer.SQLServerSchemaGenerator.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SQLServerSchemaGenerator.html",
    "title": "Class SQLServerSchemaGenerator | Data.Modeler API Reference",
    "keywords": "Class SQLServerSchemaGenerator Namespace Data.Modeler.Providers.SQLServer Assembly Data.Modeler.dll SQL Server schema generator public class SQLServerSchemaGenerator : ISchemaGenerator Inheritance object SQLServerSchemaGenerator Implements ISchemaGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SQLServerSchemaGenerator(IEnumerable<ISourceBuilder>, IEnumerable<ICommandBuilder>, IConfiguration, SQLHelper, SQLHelper) Constructor public SQLServerSchemaGenerator(IEnumerable<ISourceBuilder> queryBuilders, IEnumerable<ICommandBuilder> commandBuilders, IConfiguration configuration, SQLHelper batch, SQLHelper oneOffQueries) Parameters queryBuilders IEnumerable<ISourceBuilder> The query builders. commandBuilders IEnumerable<ICommandBuilder> The command builders. configuration IConfiguration The configuration. batch SQLHelper The batch. oneOffQueries SQLHelper The one off queries. Properties Configuration Gets the configuration. public IConfiguration Configuration { get; } Property Value IConfiguration The configuration. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] SQL Server schema generator Methods ConstraintExistsAsync(string, IConnection) Checks if a constraint exists public Task<bool> ConstraintExistsAsync(string constraint, IConnection source) Parameters constraint string The constraint to check. source IConnection Source to use Returns Task<bool> True if it exists, false otherwise GenerateSchema(ISource, ISource?) Generates a list of commands used to modify the source. If it does not exist prior, the commands will create the source from scratch. Otherwise the commands will only add new fields, tables, etc. It does not delete old fields. public string[] GenerateSchema(ISource desiredStructure, ISource? source) Parameters desiredStructure ISource Desired source structure source ISource Source to use Returns string[] List of commands generated GetSourceStructureAsync(IConnection) Gets the structure of a source public Task<ISource?> GetSourceStructureAsync(IConnection connectionInfo) Parameters connectionInfo IConnection Source to use Returns Task<ISource> The source structure SetupAsync(ISource, IConnection) Sets up the specified database schema public Task SetupAsync(ISource source, IConnection connection) Parameters source ISource The source. connection IConnection The connection. Returns Task SQL Server schema generator SetupAsync(string[], IConnection) Sets up the specified source. public Task SetupAsync(string[] schemaChanges, IConnection connection) Parameters schemaChanges string[] The schema changes. connection IConnection The connection. Returns Task SQL Server schema generator SourceExistsAsync(string, IConnection) Checks if a source exists public Task<bool> SourceExistsAsync(string source, IConnection connectionInfo) Parameters source string Source to check connectionInfo IConnection Source info to use Returns Task<bool> True if it exists, false otherwise StoredProcedureExistsAsync(string, IConnection) Checks if a stored procedure exists public Task<bool> StoredProcedureExistsAsync(string storedProcedure, IConnection connectionInfo) Parameters storedProcedure string Stored procedure to check connectionInfo IConnection Source to use Returns Task<bool> True if it exists, false otherwise TableExistsAsync(string, IConnection) Checks if a table exists public Task<bool> TableExistsAsync(string table, IConnection connectionInfo) Parameters table string Table to check connectionInfo IConnection Source to use Returns Task<bool> True if it exists, false otherwise TriggerExistsAsync(string, IConnection) Checks if a trigger exists public Task<bool> TriggerExistsAsync(string trigger, IConnection connectionInfo) Parameters trigger string Trigger to check connectionInfo IConnection Source to use Returns Task<bool> True if it exists, false otherwise ViewExistsAsync(string, IConnection) Checks if a view exists public Task<bool> ViewExistsAsync(string view, IConnection connectionInfo) Parameters view string View to check connectionInfo IConnection Source to use Returns Task<bool> True if it exists, false otherwise See Also ISchemaGenerator"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.CheckConstraints.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.CheckConstraints.html",
    "title": "Class CheckConstraints | Data.Modeler API Reference",
    "keywords": "Class CheckConstraints Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Check constraints source builder public class CheckConstraints : ISourceBuilder Inheritance object CheckConstraints Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Check constraints source builder Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source See Also ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Functions.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Functions.html",
    "title": "Class Functions | Data.Modeler API Reference",
    "keywords": "Class Functions Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Function builder, gets info and does diffs for Functions public class Functions : ISourceBuilder Inheritance object Functions Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Function builder, gets info and does diffs for Functions Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Schemas.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Schemas.html",
    "title": "Class Schemas | Data.Modeler API Reference",
    "keywords": "Class Schemas Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Schemas public class Schemas : ISourceBuilder Inheritance object Schemas Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Schemas Methods FillSource(List<dynamic>, ISource) Fills the source. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The data source. Exceptions ArgumentNullException dataSource GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source See Also ISourceBuilder"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedureColumns.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedureColumns.html",
    "title": "Class StoredProcedureColumns | Data.Modeler API Reference",
    "keywords": "Class StoredProcedureColumns Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll StoredProcedure column builder, gets info and does diffs for StoredProcedures public class StoredProcedureColumns : ISourceBuilder Inheritance object StoredProcedureColumns Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] StoredProcedure column builder, gets info and does diffs for StoredProcedures Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedures.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.StoredProcedures.html",
    "title": "Class StoredProcedures | Data.Modeler API Reference",
    "keywords": "Class StoredProcedures Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll StoredProcedure builder, gets info and does diffs for StoredProcedures public class StoredProcedures : ISourceBuilder Inheritance object StoredProcedures Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] StoredProcedure builder, gets info and does diffs for StoredProcedures Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableColumns.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableColumns.html",
    "title": "Class TableColumns | Data.Modeler API Reference",
    "keywords": "Class TableColumns Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Table column builder, gets info and does diffs for tables public class TableColumns : ISourceBuilder Inheritance object TableColumns Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Table column builder, gets info and does diffs for tables Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableForeignKeys.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableForeignKeys.html",
    "title": "Class TableForeignKeys | Data.Modeler API Reference",
    "keywords": "Class TableForeignKeys Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Table foreign keys, gets info and does diffs for tables public class TableForeignKeys : ISourceBuilder Inheritance object TableForeignKeys Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Table foreign keys, gets info and does diffs for tables Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableTriggers.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.TableTriggers.html",
    "title": "Class TableTriggers | Data.Modeler API Reference",
    "keywords": "Class TableTriggers Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Table trigger builder, gets info and does diffs for tables public class TableTriggers : ISourceBuilder Inheritance object TableTriggers Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Table trigger builder, gets info and does diffs for tables Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Tables.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Tables.html",
    "title": "Class Tables | Data.Modeler API Reference",
    "keywords": "Class Tables Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll Table builder, gets info and does diffs for tables public class Tables : ISourceBuilder Inheritance object Tables Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Table builder, gets info and does diffs for tables Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Views.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.Views.html",
    "title": "Class Views | Data.Modeler API Reference",
    "keywords": "Class Views Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Assembly Data.Modeler.dll View builder, gets info and does diffs for Views public class Views : ISourceBuilder Inheritance object Views Implements ISourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Providers Provider name associated with the schema generator public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] View builder, gets info and does diffs for Views Methods FillSource(List<dynamic>, ISource) Fills the database. public void FillSource(List<dynamic> values, ISource dataSource) Parameters values List<dynamic> The values. dataSource ISource The database. GetCommand() Gets the command. public string GetCommand() Returns string The command to get the source"
  },
  "api/Data.Modeler.Providers.SQLServer.SourceBuilders.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.SourceBuilders.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer.SourceBuilders | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer.SourceBuilders Classes CheckConstraints Check constraints source builder Functions Function builder, gets info and does diffs for Functions Schemas Schemas StoredProcedureColumns StoredProcedure column builder, gets info and does diffs for StoredProcedures StoredProcedures StoredProcedure builder, gets info and does diffs for StoredProcedures TableColumns Table column builder, gets info and does diffs for tables TableForeignKeys Table foreign keys, gets info and does diffs for tables TableTriggers Table trigger builder, gets info and does diffs for tables Tables Table builder, gets info and does diffs for tables Views View builder, gets info and does diffs for Views"
  },
  "api/Data.Modeler.Providers.SQLServer.html": {
    "href": "api/Data.Modeler.Providers.SQLServer.html",
    "title": "Namespace Data.Modeler.Providers.SQLServer | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers.SQLServer Classes SQLServerSchemaGenerator SQL Server schema generator"
  },
  "api/Data.Modeler.Providers.Source.html": {
    "href": "api/Data.Modeler.Providers.Source.html",
    "title": "Class Source | Data.Modeler API Reference",
    "keywords": "Class Source Namespace Data.Modeler.Providers Assembly Data.Modeler.dll Database class public class Source : SourceBase, ISource Inheritance object SourceBase Source Implements ISource Inherited Members SourceBase.Functions SourceBase.Name SourceBase.Schemas SourceBase.StoredProcedures SourceBase.Tables SourceBase.Views SourceBase.this[string] SourceBase.Copy() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Source(string) Constructor public Source(string name) Parameters name string Name of the database Methods AddFunction(string, string, string) Adds a function to the database public override IFunction AddFunction(string name, string schemaName, string definition) Parameters name string Function name schemaName string Name of the schema. definition string Function definition Returns IFunction Function that was created/added AddStoredProcedure(string, string, string) Adds a stored procedure to the database public override IFunction AddStoredProcedure(string procedureName, string schemaName, string definition) Parameters procedureName string Procedure name schemaName string Name of the schema. definition string Definition Returns IFunction The stored procedure AddTable(string, string) Adds a table to the database public override ITable AddTable(string tableName, string schemaName) Parameters tableName string Table name schemaName string Name of the schema. Returns ITable Table that was created/added AddView(string, string, string) Adds a view to the database public override IFunction AddView(string viewName, string schemaName, string definition) Parameters viewName string View name schemaName string Name of the schema. definition string The definition. Returns IFunction The resulting view object Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.StoredProcedure.html": {
    "href": "api/Data.Modeler.Providers.StoredProcedure.html",
    "title": "Class StoredProcedure | Data.Modeler API Reference",
    "keywords": "Class StoredProcedure Namespace Data.Modeler.Providers Assembly Data.Modeler.dll StoredProcedure class public class StoredProcedure : TableBase, ITable, IFunction Inheritance object TableBase StoredProcedure Implements ITable IFunction Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoredProcedure(string, string, string, ISource) Constructor public StoredProcedure(string name, string schema, string definition, ISource source) Parameters name string Name schema string The schema. definition string Definition of the stored procedure source ISource Source Properties Definition Definition of the stored procedure public string Definition { get; set; } Property Value string StoredProcedure class Methods AddCheckConstraint(string, string) Adds a check constraint to the table. public override ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters name string The name. definition string The definition. Returns ICheckConstraint The check constraint added to the table AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters columnName string Column Name columnType DbType Data type length int Data length nullable bool Nullable? identity bool Identity? index bool Index? primaryKey bool Primary key? unique bool Unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool On Delete Cascade onUpdateCascade bool On Update Cascade onDeleteSetNull bool On Delete Set Null Returns IColumn Type Parameters T Column type AddForeignKey(string, string, string) Adds a foreign key public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters columnName string Column name foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column AddTrigger(string, string, TriggerType) Adds a trigger to the table public override ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters name string Name of the trigger definition string Definition of the trigger type TriggerType Trigger type Returns ITrigger The trigger specified Copy(ISource) Copies this instance. public override ITable Copy(ISource source) Parameters source ISource The source. Returns ITable The copy of this instance. Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.Table.html": {
    "href": "api/Data.Modeler.Providers.Table.html",
    "title": "Class Table | Data.Modeler API Reference",
    "keywords": "Class Table Namespace Data.Modeler.Providers Assembly Data.Modeler.dll Table class public class Table : TableBase, ITable Inheritance object TableBase Table Implements ITable Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table(string, string, ISource) Constructor public Table(string name, string schema, ISource source) Parameters name string Name schema string The schema. source ISource Source Methods AddCheckConstraint(string, string) Adds a check constraint to the table. public override ICheckConstraint AddCheckConstraint(string name, string definition) Parameters name string The name. definition string The definition. Returns ICheckConstraint The check constraint added to the table AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters columnName string Column Name columnType DbType Data type length int Data length nullable bool Nullable? identity bool Identity? index bool Index? primaryKey bool Primary key? unique bool Unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool On Delete Cascade onUpdateCascade bool On Update Cascade onDeleteSetNull bool On Delete Set Null Returns IColumn Type Parameters T Column type AddForeignKey(string, string, string) Adds a foreign key public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters columnName string Column name foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column AddTrigger(string, string, TriggerType) Adds a trigger to the table public override ITrigger AddTrigger(string name, string definition, TriggerType type) Parameters name string Name of the trigger definition string Definition of the trigger type TriggerType Trigger type Returns ITrigger The trigger specified Copy(ISource) Copies this instance. public override ITable Copy(ISource source) Parameters source ISource The source. Returns ITable The copy of this instance. Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.Trigger.html": {
    "href": "api/Data.Modeler.Providers.Trigger.html",
    "title": "Class Trigger | Data.Modeler API Reference",
    "keywords": "Class Trigger Namespace Data.Modeler.Providers Assembly Data.Modeler.dll Trigger class public class Trigger : ITrigger Inheritance object Trigger Implements ITrigger Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Trigger(string, string, TriggerType, ITable) Constructor public Trigger(string name, string definition, TriggerType type, ITable parentTable) Parameters name string Name definition string Definition type TriggerType Type parentTable ITable Parent table Properties Definition Definition of the trigger public string Definition { get; set; } Property Value string Trigger class Name Name of the trigger public string Name { get; set; } Property Value string Trigger class ParentTable Parent table public ITable ParentTable { get; set; } Property Value ITable Trigger class Type Trigger type public TriggerType Type { get; set; } Property Value TriggerType Trigger class Methods Copy(ITable) Copies this instance public ITrigger Copy(ITable parentTable) Parameters parentTable ITable The new parent table. Returns ITrigger The copy Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.View.html": {
    "href": "api/Data.Modeler.Providers.View.html",
    "title": "Class View | Data.Modeler API Reference",
    "keywords": "Class View Namespace Data.Modeler.Providers Assembly Data.Modeler.dll View class public class View : TableBase, ITable, IFunction Inheritance object TableBase View Implements ITable IFunction Inherited Members TableBase.Audit TableBase.Columns TableBase.Constraints TableBase.Name TableBase.Schema TableBase.Source TableBase.Triggers TableBase.this[string] TableBase.ContainsColumn(string) TableBase.SetupForeignKeys() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors View(string, string, string, ISource) Constructor public View(string name, string schema, string definition, ISource source) Parameters name string Name schema string The schema. definition string The definition. source ISource Source Properties Definition Definition of the view public string Definition { get; set; } Property Value string View class Methods AddCheckConstraint(string, string) Adds a check constraint to the table. public override ICheckConstraint? AddCheckConstraint(string name, string definition) Parameters name string The name. definition string The definition. Returns ICheckConstraint The check constraint added to the table AddColumn<T>(string, DbType, int, bool, bool, bool, bool, bool, string, string, T, string, bool, bool, bool) Adds a column public override IColumn AddColumn<T>(string columnName, DbType columnType, int length = 0, bool nullable = true, bool identity = false, bool index = false, bool primaryKey = false, bool unique = false, string foreignKeyTable = \"\", string foreignKeyColumn = \"\", T defaultValue = default, string computedColumnSpecification = \"\", bool onDeleteCascade = false, bool onUpdateCascade = false, bool onDeleteSetNull = false) Parameters columnName string Column Name columnType DbType Data type length int Data length nullable bool Nullable? identity bool Identity? index bool Index? primaryKey bool Primary key? unique bool Unique? foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column defaultValue T Default value computedColumnSpecification string The computed column specification. onDeleteCascade bool On Delete Cascade onUpdateCascade bool On Update Cascade onDeleteSetNull bool On Delete Set Null Returns IColumn Type Parameters T Column type AddForeignKey(string, string, string) Adds a foreign key public override void AddForeignKey(string columnName, string foreignKeyTable, string foreignKeyColumn) Parameters columnName string Column name foreignKeyTable string Foreign key table foreignKeyColumn string Foreign key column AddTrigger(string, string, TriggerType) Adds a trigger to the table public override ITrigger? AddTrigger(string name, string definition, TriggerType type) Parameters name string Name of the trigger definition string Definition of the trigger type TriggerType Trigger type Returns ITrigger The trigger specified Copy(ISource) Copies this instance. public override ITable Copy(ISource source) Parameters source ISource The source. Returns ITable The copy of this instance. Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/Data.Modeler.Providers.html": {
    "href": "api/Data.Modeler.Providers.html",
    "title": "Namespace Data.Modeler.Providers | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler.Providers Classes CheckConstraint CheckConstraint class Column<T> Column class Function Function class Source Database class StoredProcedure StoredProcedure class Table Table class Trigger Trigger class View View class"
  },
  "api/Data.Modeler.html": {
    "href": "api/Data.Modeler.html",
    "title": "Namespace Data.Modeler | Data.Modeler API Reference",
    "keywords": "Namespace Data.Modeler Classes DataModeler Data modeler class."
  },
  "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html",
    "title": "Class RegistrationExtensions | Data.Modeler API Reference",
    "keywords": "Class RegistrationExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly Data.Modeler.dll Registration extension methods public static class RegistrationExtensions Inheritance object RegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterDataModeler(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterDataModeler(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Data.Modeler API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes RegistrationExtensions Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Data.Modeler API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Data.Modeler API Reference",
    "keywords": "Code using Microsoft.Extensions.DependencyInjection; using System.Data; using System.Data.SqlClient; namespace Data.Modeler.Example { /// <summary> /// This is an example of how to use the Data.Modeler library to generate SQL commands to create a database schema. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create a service provider using the Canister configuration var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Create a data modeler instance from the service provider var DataModeler = Services?.GetService<DataModeler>(); // Create a schema provider for SQL Server using the SQL Client Factory var SchemaProvider = DataModeler.GetSchemaGenerator(SqlClientFactory.Instance); // And let's define the database schema that we want to generate var Source = DataModeler.CreateSource(\"MySource\"); // Add a table to the source with the specified name and schema var Table = Source.AddTable(\"TableName\", \"dbo\"); // Add a column to the table with the specified name and type var Column = Table.AddColumn<int>(\"ColumnName\", DbType.Int32); // Check constraints can be added to a table along with keys and indexes var CheckConstraint = Table.AddCheckConstraint(\"CheckConstraintName\", \"Check Constraint Definition\"); // A view is treated similarly to a table var View = Source.AddView(\"ViewName\", \"View Creation Code\", \"dbo\"); // Functions can be added to the source var Function = Source.AddFunction(\"FunctionName\", \"Function Creation Code\", \"dbo\"); // We can also add a stored procedure to the source var StoredProcedure = Source.AddStoredProcedure(\"StoredProcedureName\", \"Stored Procedure Creation Code\", \"dbo\"); // Generate the SQL commands to create the database based on the source schema model var DatabaseGenerationCommands = SchemaProvider.GenerateSchema(Source, null); foreach (var Command in DatabaseGenerationCommands) { // We're writing the SQL command out but we could also execute it against a database Console.WriteLine(Command); } } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Data.Modeler | Data.Modeler API Reference",
    "keywords": "Data.Modeler Data.Modeler is a library used to interact with model database schemas in C#. Works with .Net Core. Basic Usage In order to use Data.Modeler, you need to first wire up the system with your ServiceCollection. In order to do this, all you need to do is make one method call: serviceCollection.AddCanisterModules(); This line is required prior to using the DataModeler class for the first time. Once Canister is set up, you can call the DataModeler class provided: var SchemaProvider = DataModeler.GetSchemaGenerator(SqlClientFactory.Instance); Note that the above gets the schema provider for SQL Server but for other databases you must provide the DbProviderFactory associated with it. You can also start creating a schema: var Source = DataModeler.CreateSource(\"MySource\"); The \"MySource\" string is the database name that you wish to use. Creating a Schema Once you have your ISource object, you can start adding on to it: var Table = Source.AddTable(\"TableName\", \"dbo\"); var Column = Table.AddColumn<int>(\"ColumnName\",DbType.Int32); var CheckConstraint = Table.AddCheckConstraint(\"CheckConstraintName\", \"Check Constraint Definition\"); var View = Source.AddView(\"ViewName\",\"View Creation Code\", \"dbo\"); var Function = Source.AddFunction(\"FunctionName\",\"Function Creation Code\", \"dbo\"); var StoredProcedure = Source.AddStoredProcedure(\"StoredProcedureName\",\"Stored Procedure Creation Code\", \"dbo\"); From there the schema provider can be used to either generate the commands needed to create the database or what commands are needed to alter an existing database to the desired schema: var MyCommands = SchemaProvider.GenerateSchema(DesiredSchema, SourceSchema); If SourceSchema is null, then it will treat it as the database doesn't exist. If the SourceSchema is not null, it will act as though the database exists and the DesiredSchema is what you want the final schema to look like. Note that deleting columns, tables, etc. is not done by the system. It will, however, generate calls to drop functions, stored procedures, views, constraints, etc. if they need to be updated. Another thing you can do is have the system apply those changes for you: SchemaProvider.Setup(DesiredSchema,new Connection(Configuration, SqlClientFactory.Instance, \"Default\")); The connection object must be fed a IConfiguration object, a DbProviderFactory for the database type you wish it to connect to, and either the name of your connection string in the configuration object or a connection string: SchemaProvider.Setup(DesiredSchema,new Connection(Configuration, SqlClientFactory.Instance, \"Data Source=localhost;Initial Catalog=ExampleDatabase;Integrated Security=SSPI;Pooling=false\")); Adding a ISchemaGenerator The schema generator is what the system uses to generate the individual commands. Data.Modeler comes with one for SQL Server but in order to add your own you must create a class that inherits from ISchemaGenerator. From there the system will automatically pick up the schema generator and allow you to use it: var SchemaProvider = DataModeler.GetSchemaGenerator(MyDbFactoryProvider); Note that you can also create one for SQL Server and the system will actually return the one that you create instead of the one built into the system. Installation The library is available via Nuget with the package name \"Data.Modeler\". To install it run the following command in the Package Manager Console: Install-Package Data.Modeler Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}